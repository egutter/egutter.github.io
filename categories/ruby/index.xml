<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on 10 Pines Blog</title>
    <link>http://blog.10pines.com/categories/ruby/</link>
    <description>Recent content in Ruby on 10 Pines Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Jul 2016 13:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.10pines.com/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Collection Filters in Ruby</title>
      <link>http://blog.10pines.com/2016/07/14/collection-filters-in-ruby/</link>
      <pubDate>Thu, 14 Jul 2016 13:00:00 +0000</pubDate>
      
      <guid>http://blog.10pines.com/2016/07/14/collection-filters-in-ruby/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; acknowledgements (and thanks!) to MÃ¡ximo Prieto (our OOP guru) who had this idea and he implemented it on
Smalltalk.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;We want to have a collection that filters its elements as we add them using a given condition. For instance, we can
have an &lt;code&gt;Array&lt;/code&gt; that only allows even numbers.&lt;/p&gt;

&lt;p&gt;First, and important, is to understand what a filter &lt;em&gt;is&lt;/em&gt;. &amp;ldquo;filter&amp;rdquo; is a very overloaded word, and sometimes used in a
technical way. Let&amp;rsquo;s say that a filter is someone with the single responsibility of deciding if something has to pass
over or not.&lt;/p&gt;

&lt;h2 id=&#34;first-approach&#34;&gt;First approach&lt;/h2&gt;

&lt;p&gt;The first, and more intuitive approach, is to subclass &lt;code&gt;Array&lt;/code&gt; and override &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and any other &amp;ldquo;adding&amp;rdquo; methods if
needed. Something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;FilteredArray&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Array&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;filter_with&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(condition)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(condition)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(condition)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@condition&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;condition&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(element)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@condition&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;call(element)&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;super&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which problems does it have?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is specific to &lt;code&gt;Array&lt;/code&gt;s. if we want to filter other kind of collections, we need to create specific subclasses for
each of them. We can move a step forward and try to define a &lt;code&gt;Filterable&lt;/code&gt; module or something similar, but we will need
to touch collection classes anyway. So we will avoid mixins.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It uses an &lt;code&gt;if&lt;/code&gt;. Remember, #RealDevsDontUseIf (it&amp;rsquo;s in our T-shirts, we take this seriously). We are losing a
concept here if we limit the solution to just put an if, just because it &lt;em&gt;looks&lt;/em&gt; simpler.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The filter is not reified. We just &lt;em&gt;hacked&lt;/em&gt; something into &lt;code&gt;Array&lt;/code&gt;. We still do not &lt;em&gt;know&lt;/em&gt; what a filter &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-idea&#34;&gt;The idea&lt;/h2&gt;

&lt;p&gt;There should be a filter object, and it should be placed between the user and the filtered object. Imagine you are
modeling a person using a pair of glasses. Does the eyes tell the glass what/how to filter? No, glasses do!. So why
a collection need to decide whether to filter or not? is it in its essence?&lt;/p&gt;

&lt;p&gt;Light goes first to the glasses, then glasses &amp;ldquo;decide&amp;rdquo; which light pass to the eyes. In a similar way, a &amp;ldquo;collection
filter&amp;rdquo; decide which objects passes and which don&amp;rsquo;t.&lt;/p&gt;

&lt;h2 id=&#34;implementing-collection-filters&#34;&gt;Implementing collection filters&lt;/h2&gt;

&lt;p&gt;The two main responsibilities of a collection filter are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intercept the &amp;ldquo;adding&amp;rdquo; messages, to evaluate the given condition and decide what to do based on the result.&lt;/li&gt;
&lt;li&gt;Delegate any other messages to the collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This collection filter should act as an &amp;ldquo;invisible proxy&amp;rdquo;, so the user does not know if they are using a filter or a
collection. It should be a polymorphic object respect to collections. To implement it, I subclassed my proxy object from
&lt;code&gt;BasicObject&lt;/code&gt;. Maybe there is a better solution, but it solved my concrete problem here. It&amp;rsquo;s not the purpose
of this post discussing proxy implementations.&lt;/p&gt;

&lt;p&gt;Introducing the proxy object, and the definition of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, we end up with this code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UndefinedCollectionFilter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;BasicObject&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(collection,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;condition)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@collection&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;collection&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@condition&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;condition&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(an_object)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@condition&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;call(an_object)&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;super&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;respond_to?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(selector,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;include_private&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@collection&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;respond_to?(selector,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;include_private)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;method_missing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(selector,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@collection&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;send(selector,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Are we done? Can we go home? No! we still have the &lt;code&gt;if&lt;/code&gt;. How can we eliminate it? Well, we have 3 different filtering
decisions, so we should have 3 objects representing each one. Let me introduce you those objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Undefined filter&lt;/strong&gt;: it is the &amp;ldquo;passive&amp;rdquo; filter, the object that is waiting for an object to come. As it does not
know if should behave as open or closed, we call it undefined. It&amp;rsquo;s the object that we will pass to the user and it
will act as an invisible proxy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open filter&lt;/strong&gt;: it is the object that should let the object pass.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Closed filter&lt;/strong&gt;: in opposition to the open filter, this object should not let the object pass.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After implementing the filters, and the logic to decide which filter to use in each case, the code resulted in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# collection_filter/undefined.rb&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CollectionFilter&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Undefined&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;BasicObject&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;filter_with&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(collection,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(collection,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(collection,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;@collection&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;collection&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;@condition&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;filter_for(object)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;add(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@collection)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;respond_to?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(selector,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;include_private&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;@collection&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;respond_to?(selector,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;include_private)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filter_for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;filters_provider&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find_filter(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@condition)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filters_provider&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;Base&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;method_missing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(selector,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;@collection&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;send(selector,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# collection_filter/base.rb&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_handling_protocol&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CollectionFilter&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Base&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;find_filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;filter_implementation_for(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;filter_implementation_for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;filter_implementations&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;detect&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;can_filter?(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;filter_implementations&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;CollectionFilter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Open&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;CollectionFilter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Closed&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can_filter?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;subclass_responsibility&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# collection_filter/closed.rb&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CollectionFilter&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Closed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Base&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can_filter?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;call(object)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;collection)&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;# nothing to do&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# collection_filter/open.rb&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CollectionFilter&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Open&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Base&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can_filter?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;call(object)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;collection)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;collection&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;object&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look at the &lt;code&gt;detect&lt;/code&gt; usage to find the filter, and the &lt;code&gt;if&lt;/code&gt; was just gone. The collection triggered the decision, not
us. That&amp;rsquo;s good.&lt;/p&gt;

&lt;p&gt;How can we use it? Let&amp;rsquo;s take a look at some simple tests, as well as the &lt;code&gt;Array&lt;/code&gt; extension to build the filtered
collection easier:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# undefined_collection_filter_test.rb&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UndefinedCollectionFilterTest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Minitest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Test&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_it_does_not_add_an_element_that_should_be_filtered&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array_filtering_even_numbers&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;empty?&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_it_adds_an_element_that_should_not_be_filtered&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array_filtering_even_numbers&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;include?(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;array_filtering_even_numbers&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;condition&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(element)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;even?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filter_with(condition)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# array.rb&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Array&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;filter_with&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(block)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;CollectionFilter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Undefined&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filter_with(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This solution can be criticized because it has several classes, and it could be implemented in much less lines of
code. But, are the responsibilities in other potential smaller solutions well splitted? Are filters part of the
domain model of those solutions?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Which object do we need to touch for modifying the behavior when the filter does not let you pass? Well, one single
object with that specific responsibility.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It&amp;rsquo;s good to evaluate an implementation not seeing only how easy it is, or how many lines of code it has, but also
validating all the responsibilities belong to the proper objects and how easy it is to be extended in the future.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To me, filters are relevant concepts, that is worth to have as separate objects. These relevant concepts (and
hidden most of the time) make a difference and they are a sign of mature, well modeled systems.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There&amp;rsquo;s more coming! how we can use this filter with other kind of objects? is there more filtering options rather
than open/closed? these are some of the questions I&amp;rsquo;ll try to answer in my next post.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can take a look at the full code at the &lt;a href=&#34;https://github.com/ngarbezza/collection_filter&#34;&gt;collection_filter repo&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ruby On Pains</title>
      <link>http://blog.10pines.com/2015/11/25/ruby-on-pains/</link>
      <pubDate>Wed, 25 Nov 2015 15:28:11 +0000</pubDate>
      
      <guid>http://blog.10pines.com/2015/11/25/ruby-on-pains/</guid>
      <description>

&lt;p&gt;Have you ever heard about the &lt;em&gt;Rails way&lt;/em&gt;?
I would like to introduce some pains that I&amp;rsquo;ve seen and keep seeing in all the Rails projects due to the &lt;em&gt;Rails way&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;activerecord&#34;&gt;ActiveRecord&lt;/h2&gt;

&lt;p&gt;How many times do we need to find an object in a Rails project? How many times do we create, update or delete objects from the DB? Many times, isn&amp;rsquo;t it? We are used to repeat these actions in all our ActiveRecord classes. We do it like monkeys, never ask for a timeout and think about it. It seems to be something &lt;em&gt;normal&lt;/em&gt; when we use this framework, it&amp;rsquo;s the famous &lt;em&gt;Rails way&lt;/em&gt;. It&amp;rsquo;s &lt;em&gt;normal&lt;/em&gt; for us to have a class that answers &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, etc, but we never think if itâs right and whether there could be a better way of doing it.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s typical to find this kind of logic in a Rails project, see the example of this controller:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UserController&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;index&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@users&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@user&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find(params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
    
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@user&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create(user_params)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt;
 
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;user_params&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;require(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;permit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The OO paradigm defines, among other things, that a class has two main responsibilities. The first one is defining the behavior for the objects of that class, and the second one is creating instances of it. This means that all objects that are instances of the same class can perform the same actions. So, when did we talk about persisting? We didn&amp;rsquo;t say anything about classes having the responsibility of writing to the database or executing a query in order to load some instances in memory. Have you ever thought what are we doing to our classes in order to answer those kind of messages? Basically inheriting from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;, which is a strong association that defines a rigid behavior that doesn&amp;rsquo;t follow the paradigm principles. Look at this alternative:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UserController&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;index&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@users&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;UserRecords&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find_all&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@user&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;UserRecords&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find(params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Definitely our business domain models shouldn&amp;rsquo;t be coupled to the way we persist them. The main reason is both belong to different domains, having different kind of responsibilities. Moreover, have you ever thought about changing Rails for another framework? Our models shouldn&amp;rsquo;t change, our code shouldn&amp;rsquo;t change much. We should only need to change those entities in charge of persistence. But if those entities are the same that model our business domain, probably we are in trouble.&lt;/p&gt;

&lt;h2 id=&#34;validations&#34;&gt;Validations&lt;/h2&gt;

&lt;p&gt;Have you ever thought about invalid objects? Moreover, have you ever thought if it make sense to think about valid objects? Well, in real life we don&amp;rsquo;t have invalid entities, we don&amp;rsquo;t have invalid persons, or invalid cars, it would be ridiculous. But, since the external world interacts with computer systems, for example someone using a web application, we can always do it in a bad way. We can fill forms incorrectly, e.g. filling a telephone input field with my name. However this doesn&amp;rsquo;t mean that invalid objects should exist. We can have validations or rules that need to be satisfied in order to process that form and create a new user in our system.&lt;/p&gt;

&lt;p&gt;Let me be more specific. In a Rails project we can probably find controllers like&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@user&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create(params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;valid?&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;redirect_to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;show_path(@user)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:create&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;errors&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;errors&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We usually ask an object if it&amp;rsquo;s valid because, I suppose, it&amp;rsquo;s the &lt;em&gt;Rails way&lt;/em&gt;. As I said, it&amp;rsquo;s ridiculous, I&amp;rsquo;m sure that User class is full of &lt;code&gt;validates&lt;/code&gt; and we still can create invalid instances.&lt;/p&gt;

&lt;p&gt;Suppose we are in 1930, and you go to a club asking for a sign up. The help desk gives you the users record book and asks you to write your enrollment, then the help desk checks whether you have filled the enrollment correctly. If you did it wrong, you will be asked to fix it. Well, I&amp;rsquo;m sure that book would be full of corrections. Wouldn&amp;rsquo;t it be better to have a sign up form that the helpdesk uses to complete an enrollment that we know is correct?&lt;/p&gt;

&lt;p&gt;The problem here is that we are modeling a user when we don&amp;rsquo;t have to. We are omitting something in the middle, the form. We aren&amp;rsquo;t modeling that, take a look at this short example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;UserEnrollmentForm&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(user_params)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@user&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;UserEnroller&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;call(form)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;redirect_to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;show_path(@user)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;UserEnrollmentError&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:create&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we are just delegating the responsibility of deciding whether to create or not a User based on an input form. Again, have in mind the given implementation is not part of the scope, we can discuss multiple ways of doing this. The main thing is, we should never have invalid objects in our system. If something goes wrong while creating or modifying an instance, I would like to be notified asap - In Rails, use the bang always!&lt;/p&gt;

&lt;h2 id=&#34;ruby-coals&#34;&gt;Ruby Coals&lt;/h2&gt;

&lt;p&gt;I like using that word just to refer to awful gems. What happens when you grab a coal? Your hands get dirty right? Well, this is what I feel with some gems when I start using them in a project. Also a coal is the primitive of a gem and it really feels like we are not progressing when we use that kind. The fact is that the &lt;em&gt;Rails way&lt;/em&gt; is awesome cause we can find some functionality that someone has already built, installing that gem, and voilÃ¡.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see some examples. We can start with this pagination coal&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Post&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;per_page&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;PostsController&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@posts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;paginate(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:page&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don&amp;rsquo;t like that way of doing things, we are breaking the OO design rule about responsibilities and not coupling things that belong to different domains. Here, we are coupling our &lt;code&gt;Post&lt;/code&gt; model with the idea of paginating them for a view, that&amp;rsquo;s crazy! We should find a better way, such as modeling a paginator instead of having our classes answering messages like &lt;code&gt;per_page&lt;/code&gt; or &lt;code&gt;paginate&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;PostsController&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;paginator&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Paginator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;PostsBook&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find_all,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;per_page&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;POSTS_PER_PAGE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;posts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;paginator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;call(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:page&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now take a look at this filtering coal&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Student&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:with_country_id&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(country_id)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;â¦&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:sorted_by&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(field)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:search_query&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
      
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;filterrific(&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;default_filter_params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;sorted_by&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;created_at_desc&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;available_filters&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:sorted_by&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:search_query&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:with_country_id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;StudentController&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;index&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@filterrific&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;initialize_filterrific(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Student&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:filterrific&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@students&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@filterrific&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;page(params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:page&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;respond_to&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;html&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s really good! Our models become a storage of filtering configuration! Seriously, the filtering functionallity that we offer in a view has nothing to do in our &lt;code&gt;Student&lt;/code&gt; model. Does a student need to know about filtering configuration? One more time, we are coupling. Here is another simple way of doing this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;StudentController&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;students_filter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;StudentsFilter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:filtering&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;@students&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;StudentRecords&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;with_filter(filter)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find_all&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, let me remeber that the examples shown above are just ilustrative, we are not discussing the implementation, but the approach we are choosing. My suggestion is, let&amp;rsquo;s think twice before adding this kind of coals as your code will get dirty and removing or refactoring this kind of functionality to another place will be a pain in the ass.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In my opinion, Rails is a good framework for a kick-off. Itâs easy to write the firsts test cases, implement the idea, and deploy it. But, what happens when the application starts to grow? Sometimes we lose our mind trying to get things out faster, and we shouldn&amp;rsquo;t forget the importance of designing good models, otherwise implementing the next feature becomes a headache. Also you will always find multiple gems to solve your problem, but think the way you are going to implement such thing, most of them make your models dirty. Always remember that it is key to understand the essence of the objects in the reality&amp;rsquo;s domain to keep it on our code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Symbols: the new return codes? (Pt. 2)</title>
      <link>http://blog.10pines.com/2014/09/29/symbols-the-new-return-codes-part-2/</link>
      <pubDate>Mon, 29 Sep 2014 14:29:50 +0000</pubDate>
      
      <guid>http://blog.10pines.com/2014/09/29/symbols-the-new-return-codes-part-2/</guid>
      <description>

&lt;h2 id=&#34;flow-control-with-exceptions-and-closures&#34;&gt;Flow control with exceptions and closures&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&#34;http://blog.10pines.com/2014/09/23/symbols-the-new-return-codes/&#34; title=&#34;Symbols, the new return codes?&#34;&gt;this previous post&lt;/a&gt; we&amp;rsquo;ve considered the benefits and inconveniences of using nil and symbols as return values in a method.
Now weâll evaluate the possibility of throwing an exception, and yet another alternative: using a closure.&lt;/p&gt;

&lt;p&gt;So, before jumping in, let&amp;rsquo;s bring to memory the example with which we were working.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class User

  def find_by_id(id)
    # retrieve something from the persistence layer
    user_record = persistence_layer.find_record_by_id(id)

    # build user from record
    parse user_record
  end

end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method should find an instance of a class by it&amp;rsquo;s id. If none is found, then &lt;code&gt;find_record_by_id&lt;/code&gt; returns nil.&lt;/p&gt;

&lt;h2 id=&#34;throwing-an-exception&#34;&gt;Throwing an exception&lt;/h2&gt;

&lt;p&gt;If we were to work with exceptions in this scenario, the code for our method would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class User
 
  def find_by_id(id)
    # retrieve something from the persistence layer
    user_record = persistence_layer.find_record_by_id(id)
    
    raise ObjectNotFoundError.new(id) if user_record.nil? 
    
    # build user from record
    parse user_record
  end
 
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is how we would use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
begin
  user = User.find_by_id(1)
rescue ObjectNotFoundError =&amp;gt; e
  # do something to handle user not found
end
 
# do something with the user

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solution is usually more acceptable than the ones we have previously considered.
It allows us to send a meaningful message to those who are expecting a non-null object, telling them that it was not found, and it also provides a way to choose the scope in which we want to handle the object-not-found situation.&lt;/p&gt;

&lt;p&gt;Plus, we automatically have context: and almost as much as we want to! Besides from getting the full stack trace printed out to our noses, exceptions provide us a way to subclass and specify errors, to add descriptions, and even supply the id of the user that we were looking for.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;And if we don&amp;rsquo;t want to catch them, it&amp;rsquo;s OK too. We can let them reach our global error handler, and forget about it.&lt;/p&gt;

&lt;p&gt;This is fine if we donât mind using a try/catch block each time we send the message, or any message that we know collaborates with this one.
But it comes with the burden of needing to know what, and if, this message throws an exception. Something that without meta-programming, we lack in dynamic typed programming languages.&lt;/p&gt;

&lt;p&gt;Another downside is that we would be using exceptions as flow-control structures, when instead we should be using them for what they are really meant to do: handle exceptional cases.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;
If having an unauthenticated user is part of our business logic, then not finding him in our database should be something quite normal.&lt;/p&gt;

&lt;p&gt;So, what can we do if we donât want to sprinkle our code with try/catch blocks, nor remember that we have to?
What if we want to have an object that represents the decisions we make in the flow of the program?&lt;/p&gt;

&lt;p&gt;Then, we arrive to our final destination: closures!&lt;/p&gt;

&lt;h2 id=&#34;using-closures&#34;&gt;Using Closures&lt;/h2&gt;

&lt;p&gt;What benefit do closures provide for us, and why?
Letâs see how we would use them in our method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class User
 
  def find_by_id(id, &amp;amp;user_not_found_block)
    # retrieve something from the persistence layer
    user_record = persistence_layer.find_record_by_id(id)
    
     # do something to handle user not found
    return user_not_found_block.call if user_record.nil? 
    
    # build user from record
    parse user_record
  end
 
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, what has changed?&lt;/p&gt;

&lt;p&gt;First of all, letâs pay attention to the signature. This signature by itself will remind us that each time we send this message, we should provide a way to handle an inexistent result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
user = User.find_by_id(1) { raise &amp;quot;Hey! I couldn&#39;t find an user with id: #{1}&amp;quot; }
 
# do something with the user

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or even better!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
user = User.find_by_id(1) { AnonymousUser.new }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, we could return an object that is polymorphic with what we are expecting (a &lt;code&gt;User&lt;/code&gt;), as opossed to the nil/symbols scenario.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;And of course, if we donât want to provide a block each time we use this particular method, the class of the object itself could define a default way of handling this, which could be, for example, throwing an exception:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class User


  def find_by_id(id, user_not_found_block=method(:default_not_found_block))
    # retrieve something from the persistence layer
    user_record = persistence_layer.find_record_by_id(id)
    
     # do something to handle user not found
    return user_not_found_block.call(id) if user_record.nil? 
    
    # build user from record
    parse user_record
  end

  def default_not_found_block(id)
    raise &amp;quot;Hey! I couldn&#39;t find an user with id: #{id}&amp;quot; 
  end
 
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second advantage of using closures, besides the friendly reminder of the object-not-found possibility, is that &lt;strong&gt;it eliminates the need of checking for nil each time we send the message&lt;/strong&gt; &lt;code&gt;find_by_id&lt;/code&gt;. This is what allows us to encapsulate the &lt;code&gt;if&lt;/code&gt;, and get rid of the repeated pattern.&lt;/p&gt;

&lt;p&gt;In this matter, it is similar to the âthrow an exceptionâ solution, but with the benefit that at the same time it solves the exceptional case from within the method, it does so using a block provided from an outer context. And apart from eliminating repeated code, closures are flexible enough to allow us to recreate any of the situations we&amp;rsquo;ve reviewed so far (which tells us they are a good generalization).&lt;/p&gt;

&lt;p&gt;The third advantage, also similar to the exceptions solution, is that because closures bind to the context in which they are instantiated, there is no context loss. So you still have access to the execution context (e.g. you could make use of the user id, if you needed to).&lt;/p&gt;

&lt;p&gt;The fourth advantage is that using closures you can create your own flow control sintax.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;And finally, in systems where performance is critical, closures tend to behave better than exceptions.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So, where is the trick? What&amp;rsquo;s the downside?
Surprisingly enough, sometimes the only reason for closures to be unpopular is the mental effort that one must do before being able to incorporate them into the way of thinking. But the truth is we have been using this since Smalltalk&amp;rsquo;s âdetectâ!&lt;/p&gt;

&lt;h2 id=&#34;to-summarize&#34;&gt;To summarize&lt;/h2&gt;

&lt;p&gt;Nil&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ Does not answer messages

- Will explode only if (and when) we try to use it
- Hard to debug
- Repeated code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Symbols&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ Descriptive

- Be careful when you write them!
- Annoying conventions
- They answer messages, they can be evasive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exceptions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ Descriptive
+ We can choose the solution&#39;s scope
+ Automatic context information
+ We can choose not to handle them

- Try/catch blocks everywhere
- Need to remember which methods throw them
- Normal flow handled by exceptions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closures&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ Friendly reminder
+ Default way to handle error
+ Flexible
+ No context loss
+ You can create your own flow control sintax
+ Performant

- Mental effort?
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;more on writing exceptions in ruby &lt;a href=&#34;https://www.youtube.com/watch?v=nlvCYJodigM&amp;amp;list=PLMkq_h36PcLA4yY58tQgj5FAXRzMaZAaY&#34; title=&#34;Implementando Excepciones con Ruby&#34;&gt;here!&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;see &lt;a href=&#34;http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl&#34; title=&#34;Don&#39;t use exceptions for flow control&#34;&gt;Don&amp;rsquo;t use exceptions for flow control&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;see &lt;a href=&#34;http://www.cs.oberlin.edu/~jwalker/refs/woolf.ps&#34; title=&#34;Null Object Pattern&#34;&gt;Null Object Pattern&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;see &lt;a href=&#34;http://library.readscheme.org/page1.html&#34; title=&#34;The Original &#39;Lambda Papers&#39; by Guy Steele and Gerald Sussman&#34;&gt;Lambda: The Ultimate&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;more on exceptions performance in JRuby &lt;a href=&#34;http://blog.10pines.com/2013/05/18/parallel-tests-on-travis/&#34; title=&#34;Parallel Tests on Travis&#34;&gt;here!&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Symbols: the new return codes?</title>
      <link>http://blog.10pines.com/2014/09/24/symbols-the-new-return-codes/</link>
      <pubDate>Wed, 24 Sep 2014 16:45:03 +0000</pubDate>
      
      <guid>http://blog.10pines.com/2014/09/24/symbols-the-new-return-codes/</guid>
      <description>

&lt;p&gt;Recently Iâve read a &lt;a href=&#34;https://twitter.com/wycats/statuses/504043642869542912&#34; title=&#34;Use symbols&#34;&gt;tweet from Yehuda Katz&lt;/a&gt; in which he suggested an interesting idea, as an alternative for using nil as a result from a method: to use a symbol instead.&lt;/p&gt;

&lt;p&gt;Well, this post is about the reasons why I think you shouldnât use a symbol, and why even returning nil is a preferable option.&lt;/p&gt;

&lt;p&gt;To better illustrate this, letâs work with an example. Suppose we have the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class User

  def find_by_id(id)
    # retrieve something from the persistence layer
    user_record = persistence_layer.find_record_by_id(id)

    # build user from record
    parse user_record
  end

end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a common method when working with persistence, and that should find an instance of a class by it&amp;rsquo;s id. If none is found, then the &lt;code&gt;find_record_by_id&lt;/code&gt; method returns nil.&lt;/p&gt;

&lt;h2 id=&#34;using-nil&#34;&gt;Using Nil&lt;/h2&gt;

&lt;p&gt;OK. So what if we choose to return nil?
When we are trying to find an object by itâs id, a possible and valid outcome is that we canât find it at all. So it makes sense that if we donât find it, we return nothing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class User

  def find_by_id(id)
    # retrieve something from the persistence layer
    user_record = persistence_layer.find_record_by_id(id)
    
    return nil if user_record.nil?
    
    # build user from record
    parse user_record
  end
  
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this oblige us to deal with a non-existent result.
The basic way to handle this is to check for nil each time we call &lt;code&gt;find_by_id&lt;/code&gt;, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
user = User.find_by_id(1)

if user.nil?
  # do something to handle user not found
end
  # do something with the user
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this implementation is that each time we want to find a user by its id we will have to check &lt;em&gt;if&lt;/em&gt; we found it, or &lt;em&gt;if&lt;/em&gt; we got a null result. (And we already know that &lt;a href=&#34;https://www.youtube.com/watch?v=rnud1EjmHBM&#34; title=&#34;Webinar: Real Devs don&#39;t use IF&#34;&gt;real devs don&amp;rsquo;t use if!&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A positive aspect of this implementation is that we can find out if we make a mistake: nil does not know how to answer messages. So when we try to use it, it will explode.
But with this little benefit, it comes that nil does not tell us where the problem originates, and it will only explode &lt;strong&gt;if&lt;/strong&gt; we try to use it. This means that a long time can pass between when we get the nil result, and until we decide to use it. Therefore, a nil related error is usually harder to debug.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So letâs leave this as it is for a moment and move on to the symbols implementation, to see if it helps us in any way.&lt;/p&gt;

&lt;h2 id=&#34;using-symbols&#34;&gt;Using symbols&lt;/h2&gt;

&lt;p&gt;One positive aspect about symbols is that they are useful to describe what they represent, just as any variable name can and should. This allows us to be as descriptive as we want when we declare it.
So, in our example, we could create a symbol called &lt;code&gt;:noUserFound&lt;/code&gt; and use it as a return value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class User

  def find_by_id(id)
    # retrieve something from the persistence layer
    user_record = persistence_layer.find_record_by_id(id)

    return :noUserFound if user_record.nil?
    
    # build user from record
    parse user_record
  end
 
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, it would be much more descriptive than returning nil, because we can know that this symbol is the specific result of the &lt;code&gt;find_by_id&lt;/code&gt; method (or any method that queries for an object that fits a particular condition), which is way less generic than the nil answer, given that nil can appear anywhere in the code, for whatever reason.&lt;/p&gt;

&lt;p&gt;But besides the small benefit that we gain from a more descriptive reification of our empty result, not much has changed. We still have to ask if the result is empty, the difference being in that this time we should ask it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
user = User.find_by_id(1)
 
if user == :noUserFound
  # do something to handle user not found
end
  # do something with the user
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now lets consider the not-so-happy aspects of this implementation, which are bound to the symbols nature.
There are a few things that may be dangerous if not handled with care:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First of all, symbols, as null, lack context. They don&amp;rsquo;t provide information about the stack trace, or the collaborators, etc.&lt;/li&gt;
&lt;li&gt;Adding context to this scenario is an effort that the programmer, rather than the programming tools, must do. And to do this, the symbol must be given a descriptive name. So in the end, what we would be doing is using a symbol&amp;rsquo;s name to try to represent and describe a certain context, which could be quite complex.&lt;/li&gt;
&lt;li&gt;IDEs usually do not provide the auto-complete feature when we write a symbol. And even if they did, the comparison between symbols is case sensitive, so you got to be really careful when you write them. This is particularly annoying when working in group, as the team has to follow yet another convention. And this is not a minor thing, combined with the following point:&lt;/li&gt;
&lt;li&gt;Symbols, as opposed to nil, know how to answer some messages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what happens if we combine both last points mentioned above? Why is this bad?
Suppose that in our beloved &lt;code&gt;find_by_id&lt;/code&gt; method we return a symbol, and somewhere after sending that message to &lt;code&gt;User&lt;/code&gt;, we try to validate the result. But when writing the validation, someone not that familiar with our fancy symbol convention writes the symbol with a different case, or spells it wrong:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
user = User.find_by_id(1)
 
if user == :NOUserFound
  # do something to handle user not found
end
  # do something with the user
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;code&gt;:noUserFound&lt;/code&gt; is different to &lt;code&gt;:NOUserFound&lt;/code&gt;, then this validation will be skipped, for the comparison result will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The danger with this is that, later on, the symbol that escaped from our clumsy validation could continue to elude us, because it knows how to answer messages.&lt;/p&gt;

&lt;p&gt;So, suppose that our intention in the first place was to find an object by id so we could find it&amp;rsquo;s size (for whatever reason).&lt;/p&gt;

&lt;p&gt;Then, when we send the &lt;code&gt;size&lt;/code&gt; message to our object, if that object is a symbol instead of the desired object, it will silently do as commanded, and no one will ever find out!&lt;/p&gt;

&lt;p&gt;This can be avoided if we use nil. First of all because there is only one possible way in which you can write it. Plus we can count on the IDE to write it for ourselves, eliminating the risk of misspelling when validating.
And second, but not less important, is because nil does not understand messages. So the instant we send him a message, it will blow up with an exception and we can find out our mistake right away. Or at least we can instantly know that something is wrong.&lt;/p&gt;

&lt;p&gt;From my point of view, this is still preferable to symbols.&lt;/p&gt;

&lt;h2 id=&#34;to-summarize&#34;&gt;To summarize&lt;/h2&gt;

&lt;p&gt;So far, this is what we&amp;rsquo;ve got:&lt;/p&gt;

&lt;p&gt;Nil&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ Does not answer messages

- Will explode only if (and when) we try to use it
- Hard to debug
- Repeated code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Symbols&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ Descriptive

- Be careful when you write them!
- Annoying conventions
- They answer messages, they can be evasive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But since we still havenât found a proper design towards solving this common problem, I encourage you to see if we can find a better solution in the next post: &lt;a href=&#34;http://blog.10pines.com/2014/09/29/symbols-the-new-return-codes-part-2/ &amp;quot;Symbols, the new return codes? (Pt. 2&#34;&gt;flow control with exceptions and closures&lt;/a&gt;&amp;rdquo;).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;see &lt;a href=&#34;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&#34; title=&#34;Null References The Billion Dollar Mistake&#34;&gt;Null References The Billion Dollar Mistake&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Rock Your Ruby: The Value of Value</title>
      <link>http://blog.10pines.com/2014/03/04/rock-your-ruby-the-value-of-value/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.10pines.com/2014/03/04/rock-your-ruby-the-value-of-value/</guid>
      <description>

&lt;p&gt;Check out the Ruby Gem at &lt;a href=&#34;https://github.com/10Pines/value_protocol&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Go ahead and ask the developer sitting next to you what is the thing that loves
the most about Ruby. It should come as no surprise that simplicity, flexibility
and expressiveness are the main reasons Ruby junkies just can&amp;rsquo;t get enough of
it.&lt;/p&gt;

&lt;p&gt;In Matz own words, seems like the &amp;lsquo;go with the flow&amp;rsquo; philosophy was present
right from the start in the Ruby community:&lt;/p&gt;

&lt;p&gt;{% blockquote %}
&amp;ldquo;Actually, I&amp;rsquo;m trying to make Ruby natural, not simple.&amp;rdquo;
{% endblockquote %}&lt;/p&gt;

&lt;h2 id=&#34;cuttin-loose-from-the-language-clichÃ©&#34;&gt;Cuttin&amp;rsquo; loose from the language clichÃ©&lt;/h2&gt;

&lt;p&gt;I do believe in the principles and values Ruby was built upon, but I don&amp;rsquo;t like
clichÃ©s. We should be critic about the restrictions a programming language
impose on us, and really pay attention when things don&amp;rsquo;t feel right.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a concrete example to show you what I&amp;rsquo;m talking about. Check out these
uses of the &lt;code&gt;:detect&lt;/code&gt; message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
discount_rules.detect(lambda{ default_discount_rule }) { |rule| rule.applies_on? a_product }
students.detect(lambda{ anonymous_student }) { |student| student.is_named? &#39;John&#39; }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do they &amp;lsquo;feel natural&amp;rsquo; to you? Do you think there is something wrong with them?
Take another look.&lt;/p&gt;

&lt;h2 id=&#34;noise-duplication&#34;&gt;Noise &amp;amp; Duplication&lt;/h2&gt;

&lt;p&gt;There are two things that fire my alarms about these examples.&lt;/p&gt;

&lt;p&gt;First, the unnecessary noisy syntax&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; needed to pass the block that gets
evaluated when no object matched the &lt;code&gt;:detect&lt;/code&gt; condition&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. I feel that
departs from the original intent of Ruby (to feel natural to the developer) by
forcing the use of &amp;lsquo;tech&amp;rsquo; terms.&lt;/p&gt;

&lt;p&gt;Second, the presence of repeated code. I don&amp;rsquo;t mind writing blocks if I really
need to, but they seem overkill when all I want is to return an object to handle
the &amp;ldquo;if none&amp;rdquo; case.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-duplicated-code&#34;&gt;Dealing with duplicated code&lt;/h2&gt;

&lt;p&gt;In the Object Oriented paradigm repeated code is a symptom of a missing
abstraction, a concept that is not being modeled. As a consequence, what would
be its implementation is scattered around the methods that were supposed to use
it.&lt;/p&gt;

&lt;p&gt;It should be clear from the examples that repeated code does not mean repeated
text, but repeated collaborations of message sends. These examples were choosen
to demonstrate that repeating code involves repeating collaborations of message
sends, instead of simply repeating text&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at what is repeated, and what is not, between the two uses of
&lt;code&gt;:detect&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
discount_rules.detect(lambda{ default_discount_rule }) { |rule| rule.applies_on? a_product }
students.detect(lambda{ anonymous_student }) { |student| student.is_named? &#39;John&#39; }

# the collaboration pattern seems to be:
FOO.detect(lambda{ BAR }) { BAZ }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whenever we want to return an object when no object matches a condition we&amp;rsquo;re
wrapping it with a &lt;code&gt;lambda&lt;/code&gt;, because that is what the &lt;code&gt;:detect&lt;/code&gt; message expects
as first collaborator.&lt;/p&gt;

&lt;p&gt;One way to go would be to add a new method to the &lt;code&gt;Enumerable&lt;/code&gt; module that does
the dirty lambda wrapping for us, but that solution would only work for
&lt;code&gt;:detect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It would be great to come up with a more generic solution, one that works for
any method that expects a block to be passed in.&lt;/p&gt;

&lt;h2 id=&#34;designing-a-generic-solution&#34;&gt;Designing a generic solution&lt;/h2&gt;

&lt;p&gt;We would like is to be able to express these examples in a more natural way,
getting rid of the extra &lt;code&gt;lambda&lt;/code&gt; parts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
# look ma&#39; no lambdas!
discount_rules.detect(default_discount_rule) { |rule| rule.applies_on? a_product }
students.detect(anonymous_student) { |student| student.is_named? &#39;John&#39; }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start solving this &amp;ldquo;challenge&amp;rdquo; not only by writing a test first, but
writing the test&amp;rsquo;s assert first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
it &#39;should be possible to pass any object when a block without arguments is expected&#39; do
  apple = Object.new
  fruits = []
    
  fruit = fruits.detect(apple) { |fruit| false }
  
  fruit.should == apple
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After running it (and watching it turn red) the failure message reveales the
root of the problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NoMethodError: undefined method `call&#39; for #&amp;lt;Object:0x00000001390d68&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides the missing message implementation, what this really means is that
instances of &lt;code&gt;Object&lt;/code&gt; are not polymorphic with lambdas (instances of &lt;code&gt;Proc&lt;/code&gt;)
with respect to the &lt;code&gt;:call&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;To make this tests pass, let&amp;rsquo;s do the simplest thing possible and add the
&lt;code&gt;:call&lt;/code&gt; method returning &lt;code&gt;self&lt;/code&gt; to &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But hey, we can do better! What about being able to pass an arbitraty object to
the &lt;code&gt;:select&lt;/code&gt; method (which expects an &lt;em&gt;implicit&lt;/em&gt; block that takes one external
collaborator)?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
it &#39;should be possible to pass any object when an implicit block with arguments is expected&#39; do
  apple = Object.new
  orange = Object.new
  fruits = [apple, orangee]
  apples_only = FruitFilter.new apple

  selected_fruits = fruits.select &amp;amp;apples_only

  selected_fruits.should have(1).item
  selected_fruits.should include apple
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;FruitFilter&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; is a test class I used to express better the intent of the
test.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This time, the failure message is a little more cryptic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TypeError: wrong argument type Object (expected Proc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need an instance of &lt;code&gt;Proc&lt;/code&gt; to be passed in to &lt;code&gt;:select&lt;/code&gt;. The unary &lt;code&gt;&amp;amp;&lt;/code&gt;
operator converts blocks to procs, but &lt;code&gt;Object&lt;/code&gt; is not a &lt;code&gt;proc&lt;/code&gt; and neither
knows how to respond to the &lt;code&gt;:to_proc&lt;/code&gt; message that gets sent when using &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do the simplest thing to pass the test, and implement &lt;code&gt;:to_proc&lt;/code&gt; in
&lt;code&gt;Object&lt;/code&gt;, returning a &lt;code&gt;proc&lt;/code&gt; that evaluates &lt;code&gt;self.call&lt;/code&gt; (that was implemented in
the first test).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how &lt;code&gt;Object&lt;/code&gt; looks like after passing the tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class Object

  def call *args
    self
  end

  def to_proc
    proc{ |*args| self.call *args }
  end

end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;There are still some test cases left to be consider to make sure everything
works as expected/nothing was broken (like backwards compatibility with &lt;code&gt;Proc&lt;/code&gt;,
&lt;code&gt;Method&lt;/code&gt; and &lt;code&gt;Symbol&lt;/code&gt; &lt;code&gt;:call&lt;/code&gt; and &lt;code&gt;:to_proc&lt;/code&gt; methods)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-deal-with-the-value-of-value&#34;&gt;What&amp;rsquo;s the deal with the &amp;ldquo;Value of Value&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;The need to reduce the friction when working with blocks was motivated by the
way Smalltalk solves the problem. Any object knows how to respond to the
&lt;code&gt;#value&lt;/code&gt; message (which behaves in the same as the &lt;code&gt;:call&lt;/code&gt; message just
implemented).&lt;/p&gt;

&lt;p&gt;Even though the implementation is pretty straight forward, just returning
&lt;code&gt;self&lt;/code&gt;, relying on &lt;code&gt;#value&lt;/code&gt; in Smalltalk allows us to express domain concepts
better, making the code easier to read by dealing with objects or blocks in the
same way&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;From my point of view, it is a little method that adds great value.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;By working the solution step by step through TDD, we&amp;rsquo;re now in a position to
explain and tell the cause of repeated code in the initial examples: instances
of &lt;code&gt;Object&lt;/code&gt; were not polymorphic with instances of &lt;code&gt;Proc&lt;/code&gt;. That forced us to
wrap objects in lambdas so &lt;code&gt;:detect&lt;/code&gt; could work as expected.&lt;/p&gt;

&lt;p&gt;Two missing abstractions (methods, in this case) were implemented in &lt;code&gt;Object&lt;/code&gt; to
get rid of repeated code, &lt;code&gt;:call&lt;/code&gt; and &lt;code&gt;:to_proc&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Besides the immediate benefit of the implemented feature, I really enjoyed the
oportunity to strictly follow the OO paradigm and TDD to see how far they can be
taken. I valued the fact that Ruby can be modified to make it fit my needs.&lt;/p&gt;

&lt;p&gt;Do not take for granted a language is expressive or feels natural just because
that&amp;rsquo;s what the documentations says and the community accepts it without
questioning. Learn from the past (as we did from Smalltalk in this case) to
avoid reinventing the flat tire.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t get trapped in the language clichÃ©. Build your own Ruby.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;I&amp;rsquo;m talking about the &lt;code&gt;lambda&lt;/code&gt;/&lt;code&gt;proc&lt;/code&gt; keywords preceding the braces needed to create a &lt;code&gt;Proc&lt;/code&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;see &lt;code&gt;:detect&lt;/code&gt; method documentation at &lt;a href=&#34;http://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-detect&#34;&gt;RubyDoc&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;If you want to understand or learn more about this concept, enroll in one of our courses! See &lt;a href=&#34;http://www.10pines.com/training/listado-cursos/diseno-avanzado-de-software-con-objetos-i&#34;&gt;DiseÃ±o Avanzado de Software Con Objetos I&lt;/a&gt; and &lt;a href=&#34;http://www.10pines.com/training/listado-cursos/diseno-avanzado-de-software-con-objetos-ii&#34;&gt;DiseÃ±o Avanzado de Software Con Objetos II&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;FruitFilter &lt;a href=&#34;https://github.com/10Pines/value_protocol/blob/master/spec/fruit_filter.rb&#34;&gt;source code&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Check the whole test suite at &lt;a href=&#34;https://github.com/10Pines/value_protocol/tree/master/spec&#34;&gt;GitHub&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;Dont&amp;rsquo; just stand there! Go ahead, grab a copy of &lt;a href=&#34;http://pharo.org/&#34;&gt;Pharo&lt;/a&gt; (a Smalltalk dialect) and browse for implementors and senders of &lt;code&gt;#value&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>