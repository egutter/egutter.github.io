<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on 10 Pines Blog</title>
    <link>http://egutter.github.io/prueba-blog/categories/agile/</link>
    <description>Recent content in Agile on 10 Pines Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Oct 2015 15:26:07 +0000</lastBuildDate>
    <atom:link href="http://egutter.github.io/prueba-blog/categories/agile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tips for introducing yourself in a conference or &#39;the conference elevator pitch&#39;</title>
      <link>http://egutter.github.io/prueba-blog/2015/10/13/the-conference-elevator-pitch/</link>
      <pubDate>Tue, 13 Oct 2015 15:26:07 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2015/10/13/the-conference-elevator-pitch/</guid>
      <description>

&lt;p&gt;It could sounds basic, but when you talk with people in a conference, you have to think quickly. So it&amp;rsquo;s very important to have in mind a successful path to a productive five-minutes chat. After being talking with a lot of people and making a lot of mistakes (since not knowing what to say about what our company do, to not asking how to contact him/her back); I’ve decided to write down a guidelines to introduce yourself and getting to know the other person, avoiding typical mistakes.&lt;/p&gt;

&lt;h2 id=&#34;must-ask-questions-and-its-must-remember-answers&#34;&gt;Must-ask questions (and its must-remember answers)&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s important to talk, but sometimes it&amp;rsquo;s more important and more difficult to listen. That&amp;rsquo;s why I prefer to start talking about what you need to hear and know from the person in front of you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What&amp;rsquo;s her/his name?&lt;/strong&gt; Basic, but sometimes when you are in a rush, you forget this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What does she/he do?&lt;/strong&gt; Again, basic. But a lot of times I&amp;rsquo;ve found myself speaking a lot about what I do in order to convince the other how great we are, that I forgot to know and understand what this guy does. And this is one of the most important things in order to identify how you can make synergy together.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How can you contact her/him back?&lt;/strong&gt; This is important so you can continue your conversation if a potential lead emerges from the talk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, it&amp;rsquo;s not important to ask the questions like this or in this order; what it is really important is that at the end of the conversation you know these 3 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you know his/her name,&lt;/li&gt;
&lt;li&gt;what his/her company do,&lt;/li&gt;
&lt;li&gt;and how you can contact him/her&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-do-i-need-to-tell-from-me&#34;&gt;What do I need to tell from me?&lt;/h2&gt;

&lt;p&gt;It is really important also to let him/her know about you. And since you have a very short limited time, you have to choose very careful what do you want the other person to remember. So here it&amp;rsquo;s the top 3 messages you should always send:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is my name and the name of my company?&lt;/strong&gt; This is important so he/she can later connect your name or your company name with other things&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What do I/we do?&lt;/strong&gt; It&amp;rsquo;s important to be wide open, but not to much. So try to be special in something, but let space for match with the interests of your audition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;With who?&lt;/strong&gt; Here I encourage to choose your top 3 clients. Not the most important for your company but the most well known.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;template-elevator-pitch-to-introduce-myself&#34;&gt;Template elevator pitch to introduce myself&lt;/h2&gt;

&lt;p&gt;So, saying this, and in order to have a training and think about this basic but important things, I create a template for sort of an elevator pitch to introduce yourself. Again, you could think this is worthless, but try doing it and you will discover that it&amp;rsquo;s not so easy.&lt;/p&gt;

&lt;p&gt;{% blockquote %}
My template elevator pitch to introduce myself&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My name is&amp;hellip;&lt;/li&gt;
&lt;li&gt;My company does&amp;hellip;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We work with&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;My name is Jorge Silva, I work at 10Pines, a south america company based in Buenos Aires&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;My company does great software for great companies&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Such as Starbucks, 8thLight and Teespring
{% endblockquote %}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now is your turn, tell me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who are you?&lt;/li&gt;
&lt;li&gt;What do you do?&lt;/li&gt;
&lt;li&gt;And how can I contact you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it. Simple and straightforward.
Hope this is useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Review of Agile 2015 @ Washington DC</title>
      <link>http://egutter.github.io/prueba-blog/2015/10/07/review-of-agile-2015-at-washington-dc/</link>
      <pubDate>Wed, 07 Oct 2015 12:34:33 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2015/10/07/review-of-agile-2015-at-washington-dc/</guid>
      <description>

&lt;h2 id=&#34;the-organization-the-conference&#34;&gt;The organization &amp;amp; the conference&lt;/h2&gt;

&lt;p&gt;This was the biggest conference I’ve ever attended. There was 2300 registered people. 5 days of talks. More than 13 tracks in parallel every hour. Everything was in big scale.
One thing that called my attention was the average age of the attendees; I’m used to see young people in the agile conferences in south america. But here, it’s really different; most of the people were around &lt;sup&gt;40&lt;/sup&gt;&amp;frasl;&lt;sub&gt;50&lt;/sub&gt; and even more. So I understood this conference and the US agile culture about software is in a later stage than in South America. And this is pretty interesting because you will find people who have been working with agile practices for more than 10 years. Even in the government there are a lot of projects working that way. So I think it is time to see agile software development as the &amp;ldquo;classic&amp;rdquo; way to develop software and not as the &amp;ldquo;new&amp;rdquo; way. Another weird thing for me is that the conference is designed for you to miss things. There is a lot of things going on at same time, beside the talks, you have a coaching clinic, lighting talks, TDD workshops, space jam, companies lounges with activities, boost, and more. So, I think it’s designed to cover all needs, but it’s impossible not to miss anything you are interested on. For a guy like me, who don’t like to miss anything, it was hard to be relaxed.&lt;/p&gt;

&lt;p&gt;{% img /images/2015-10-07-review-of-agile-2015-at-washington-dc-4.JPG %}
The conference is about to start! This is the welcome talk.&lt;/p&gt;

&lt;h2 id=&#34;my-top-5-ideas-from-the-top-5-talks&#34;&gt;My top 5 ideas from the top 5 talks&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Awesome super problems by LuKe Hohmann.&lt;/strong&gt;
Luke showed the collaborative, social, and serious games that have their roots in the agile community and have blossomed into multidimensional frameworks that are being used by agilists around the world to solve awesome superproblems. He shared his experience with the City of San Jose and their annual games over the past 3-4 years and how they were able to involve more community member perspectives in budgeting decisions. He also talked about the Los Altos School District and their experience with games to make difficult decisions about over-crowded classrooms - and again, including more people into the decision. They also presented a non-profit organization, Every Voice Engaged, which is open to work all around the world, for free, solving community problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Six Rules for Change by Esther Derby.&lt;/strong&gt;
From this talk I took two things. The first one was this phrase: &amp;ldquo;don’t force to accept people they are wrong&amp;rdquo;. It’s basic but strong and clear. Instead, just move on to solve the problem. And then encourage you to shift your language to: “This was the best solution we had at that time.” or “This served us well when” or similar. The other thing was the similarity I found between what she was talking about changing organizations, and programming. She concluded: “Big change feels like an existential threat. Small changes allow for learning” and then, “Insert at least 3 ideas (but not too many). Measure, evaluate, adjust”; sounds a lot to TDD right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retrospectives: Moving From A Subjective To An Objective World by Prateek Singh.&lt;/strong&gt;
I took from this talk just one idea: to show metrics on the retrospective and find an explanation of the different patterns; like for example see a chart of your commits over time and understand the distributions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Individuals, Interactions and Improvisation by Jessie Shternshus.&lt;/strong&gt;
Jessie is an agile consultant and improv comedian who noticed parallels between the Agile Manifesto and the key principles of improv. Both disciplines have a common goal, working software &amp;amp; creating a funny play, both are focused on collaboration with customers (audience), and because of this collaboration and feedback from customer/audience this both require it’s members to respond well to change. If you have been in an improv show, you may listen the audience shouting out a movie genre, a funny constrain, etc… Well, those are the features requests.&lt;/p&gt;

&lt;p&gt;{% img /images/2015-10-07-review-of-agile-2015-at-washington-dc-1.JPG %}
A graphic summary of the talk by Claudia Sandoval (@claumsandoval)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Emotional Intelligence in Leadership by Judith Mills.&lt;/strong&gt;
From this talk I also took this 3 main ideas:
- Respond, don’t react. React means to act without thinking, just in an immediate way. To respond means to act after evaluating and thinking. So, in order to respond, you need to know yourself. And we made an exercise to answer: what emotions do get me in trouble? or block my progress? or spoil/sour my relationships? And then, think about what are my triggers? What’s an alternative to my usual behavior? Exploring this questions is a good way to understand yourself and start acting in a more controlled way.
- Emotional contagion. This is an interesting concept that show us how the emotions can be contaged. So for example, if you are kind of a happy person and you smile you generate the same in the people surrounding you. And of course the same happens with the opposite. So, this is the principle of how just one person can move all a team into a happy/positive team, or to a negative or unhappy one. At last, we saw a video called &amp;ldquo;don’t laugh video” where you could experience yourself the emotional contagion observing other people laughing and discovering yourself after a time with a smile.
- And last, this quote from Aristotle: &amp;ldquo;We are what we repeatedly do. Excellence then is not an act but a habit”.&lt;/p&gt;

&lt;p&gt;You will find most of the presentations here if you are interested: &lt;a href=&#34;https://agile2015.sched.org/&#34;&gt;https://agile2015.sched.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-jeff-patton-experience&#34;&gt;The Jeff Patton experience&lt;/h2&gt;

&lt;p&gt;Jeff Patton is one of my favorite famous people in the agile world. And this time I had the opportunity to talk a little more with him. Once you do it, you can easily see he is a modest guy with a lot of knowledge. We were talking about his mona lisa example of how to develop iteratively and incrementally, and my example of the bull fighting by Picasso inspired on the previous one. After talking with him, I decided to write a more detailed post about this ideas.
I also attended to his talk, about story mapping, and one thing that was awesome was that he give the talk without any presentation. Instead he choose to draw in sticky notes everything while he was speaking. Awesome! and very graphical.&lt;/p&gt;

&lt;h2 id=&#34;my-talk&#34;&gt;My talk&lt;/h2&gt;

&lt;p&gt;My talk was called “Lean Sales Up” and it was oriented to all who are worried about the gap existing between sales and execution of an agile project. Bringing the concepts and principles of lean model to sales, we had created a practice which integrates the pre-sales phase with the traditional agile development cycle. Unlike the traditional pre-sales practices, ours helps to add value to the customer beginning at the conception stage; promoting closing the deal, while at the same time making the development team happier. This talk was a consequence of an experience report[*] I have to write in order to be accepted in the conference as speaker.
Regarding the time I had to give the talk, my experience was really great. I wasn’t nervous during the talk (obviously I was nervous before). At the end I felt comfortable. There wasn’t too much people considering the amount of conference attendees (mine was around 30 people). I had half an hour, so I needed to be pretty clear and go directly to the point. The time was enough. I printed several copies of my experience report, so at the end I offered a printed copy and it turned out to be a good idea because a lot of people asked for one; so I suppose people were interested in that topic.&lt;/p&gt;

&lt;p&gt;{% img /images/2015-10-07-review-of-agile-2015-at-washington-dc-6.JPG %}
This is me about to start my talk&lt;/p&gt;

&lt;p&gt;Here you can find the published experience report:
&lt;a href=&#34;http://www.agilealliance.org/files/5814/3691/4983/LeanSalesUp-MakingValueFromProductConception.pdf&#34;&gt;http://www.agilealliance.org/files/5814/3691/4983/LeanSalesUp-MakingValueFromProductConception.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and here my presentation of the talk:
&lt;a href=&#34;http://prezi.com/bqpkwk3zlwls&#34;&gt;http://prezi.com/bqpkwk3zlwls&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;{% img /images/2015-10-07-review-of-agile-2015-at-washington-dc-3.jpg %}
[*] Many thanks to Rebecca Wirfs-Brock who was my shepherd and help me a lot&lt;/p&gt;

&lt;h2 id=&#34;the-latino-community&#34;&gt;The latino community&lt;/h2&gt;

&lt;p&gt;I had the chance of spending time with lot of latino guys, mainly from the latin-america agile community. And I think this was a huge difference regards my experience. But I think we lack of previous organization; we could have been more productive if we could organized ourselves a little more. So for example, in a sort of retrospective and thinking in the future US conferences we could explore the following things:
share hotel rooms. Speakers have free room and can add an additional person for a very low fare. So we could share rooms saving as much a ticket plane from Buenos Aires to New York.
Commercial Missions: if we take all the companies together, we could organize commercial mission with the Argentine embassy for our companies
Co-Speaker: to be a speaker here is really hard. You don’t have the fluid language, the audience is more critic, you are far away of your comfort zone. So, you could minimize this by co-speaking with other guy. You can low the tension and the pression if you speak with a partner.
Share your experience with newbies or first attendees.
We could be more present in the conference, for example using all the same t-shirt, or proposing some king of side activity.
The idea is to show to the world we have a lot of experience and we are also pretty good at agile.&lt;/p&gt;

&lt;p&gt;{% img /images/2015-10-07-review-of-agile-2015-at-washington-dc-2.jpg %}
The latino community having dinner&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I think it was a really good experience, you can learn a lot in different levels. And I think for me was a really interesting experience to another perspective of how can be a conference. I feel now more mature about speaking and attending at international conferences.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enterprise Lean Canvas</title>
      <link>http://egutter.github.io/prueba-blog/2015/07/13/enterprise-lean-canvas/</link>
      <pubDate>Mon, 13 Jul 2015 10:43:47 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2015/07/13/enterprise-lean-canvas/</guid>
      <description>&lt;p&gt;A few days ago, we were asked to estimate a new big extension for a previous application we developed a year ago.
Since we had a strong deadline to send this proposal, and we couldn&amp;rsquo;t do it the way we are used to (through a Product Discovery Workshop), we decided to try an idea which was in my mind some time ago: a Corporate Lean Canvas, our customized variation to the original Lean Canvas [1].&lt;/p&gt;

&lt;p&gt;One clarification I would like to point out is that I will use the word &amp;ldquo;product&amp;rdquo; as a representation of the &amp;ldquo;thing&amp;rdquo; created after developing software. It could a product, or it could be an internal application for a company. I will use this word to mean the operable result of the project and not something limited for commercialization.&lt;/p&gt;

&lt;p&gt;The goal was to had a big picture of what we have to do, identifying the main problems to solve, and having an idea of the size of the development so we can estimate it and price it.
In order to accomplish this we figured out how to adapt and customize the Lean Canvas model, having in mind:
- this development is not a startup product but an internal application
- the goal was not validate the business idea and plan but to have a &amp;ldquo;big picture&amp;rdquo; clear vision of the needs that generated this development&lt;/p&gt;

&lt;p&gt;So, we ended up with this customized version of the lean canvas:&lt;/p&gt;

&lt;p&gt;{% img /images/custom_lean_canvas.png 955 611 %}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Top 3 problems: This is the first step and should be our north star. This is the main need, the reason they called us. It&amp;rsquo;s very important to reduce the options to a list of no more than 3 items, because you could fall into the mistake of trying to solve every single problem. Besides that, to setting a limit forces you to find the essence of the application and be focused on that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Top 3 Solutions: Here we have to identify the top 3 most important features that the application should have. Obviously, these 3 items should be in harmony with the previous ones, since these should be solutions to the problems stated before.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unique Value Proposition (UVP): As you may know, this is one of the most important and most difficult items to define. The UVP is an effort to distill the essence of the product to be built into a few words. Imagine that anybody should be able to read your UVP sentence and to understand in 10 seconds the value you add with this product. In words of S. Blank: &amp;ldquo;Unique Value Proposition: A single, clear compelling message that states why you are different and worth buying&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Key metrics: We want to validate that the application solves what we thought it solved once implemented. The idea is to find and identify metrics or &amp;ldquo;measurable things&amp;rdquo; that show us some improvement after the new application has been working for a while. So, it should be possible to get some metrics before the implementation, and afterwards to validate a real improvement by confirming that these KPIs (key performance indicators) have improved quantitatively. At the end of the project we expect to have improved two or three things, delivering an objetive project success indicator.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Target users (or roles): We need to identify the final users and/or roles that are going to use the application. This is strongly related with the problems stated in the first item. Here again we change the meaning of this section as used in the original &amp;ldquo;lean canvas&amp;rdquo; since this connotation is not applicable to this kind of products as they have the intention of identifying potential clients.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Savings: The idea here is to recognize which are the company savings that this application brings. This could be just money, but since it is often hard to measure or get that information when you&amp;rsquo;re a a provider, we could work around with this by measuring how many hours we save, how much rework is avoided, how many processes we improve, how many reports and controls we automatize, etc. This information could also be interesting for you to put a price on your development.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that the solutions identified in the second item are hypothesis that could change or mutate, even the problems as well. The idea of this tool is to explore not only solutions but to identify effectively the root problems or the problems that hurt the most. So, it could be possible that after some iterations you get deeper in the analysis and get a better understanding of what the root problems are and how to solve them.&lt;/p&gt;

&lt;p&gt;This new adapted model and its modifications allows us to quickly go around the entire application, understanding needs, main problems to solve, and benefits provided by the potential software. And at last, we could get a quick idea for us to estimate our proposal.&lt;/p&gt;

&lt;p&gt;Summarizing, I think this is an quick alternative to help you prepare a formal business plan and study the case in a more focused lean way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Backlog Guy</title>
      <link>http://egutter.github.io/prueba-blog/2015/04/09/the-backlog-guy/</link>
      <pubDate>Thu, 09 Apr 2015 09:24:15 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2015/04/09/the-backlog-guy/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Yeah, this is how everyone called me in my latest gig. You want to hear the story? (I heard yes). It was a green field, ambitious project that was going to be performed differently than other projects in the same organization, using design thinking and Agile. People (mostly business people) was thrilled. Everyone working together, designing this new product. After a couple of weeks of design thinking, I said, innocently, that it was time to start building a backlog. Ohh nooo. Business people panic! This obviously was going back to the old, slow and painful way of building software that was used before. Interestingly enough (I thought) the backlog is that artifact that even myself alone use for any personal project. It’s light, useful and very powerful. In this post, I won’t focus on the psychological reasons of the freaking out. I will just focus on the backlog.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-backlog&#34;&gt;What is the Backlog?&lt;/h2&gt;

&lt;p&gt;In a few words, the backlog is the prioritized list of things you need to get done to build your product. I deliberately left out the word ‘requirement’. Are they requirements? Who knows. What we do know is we have a problem or an opportunity and we are going to build something to solve it. The backlog is that tool that allows us to define and manage what we need to build.&lt;/p&gt;

&lt;p&gt;Let’s think how Scrum works:&lt;/p&gt;

&lt;p&gt;1) First you have an idea&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://egutter.github.io/prueba-blog/images/ID-100311609.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2) Then you start thinking, brainstorming and describing your idea&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://egutter.github.io/prueba-blog/images/ID-100248850.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3) Then you need to break it in pieces that can fit an iteration and prioritize it. You can also try to estimate how big are the other items to start measuring your velocity and understanding the dimension of what you need to build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://egutter.github.io/prueba-blog/images/backlog.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Voila! The result is a backlog. At least a backlog to start with. The backlog is a living artifact that will mutate throughout the project, as more is understood, described and defined in the product. It is important to notice that the backlog it’s a document that serves as an interface between the business and technical sides of the team. Business folks will create it and development folks will consult it (and provide feedback) all the time. It is also important to understand that the backlog will contain items with different levels of refinement and granularity. The items on the top, which will be worked on in the near future need to be better understood and defined. The items after them less. And the items that are at the far bottom are just ideas. Why spending time and money if we don’t even know if we are going to do them, right?&lt;/p&gt;

&lt;h2 id=&#34;a-note-about-user-stories&#34;&gt;A Note about User Stories&lt;/h2&gt;

&lt;p&gt;Everyone that knows a bit about Scrum knows that these ‘items’ (as I called them before) that make up the backlog are no other thing that User Stories. A User Story expresses, using business language, a functionality of a product. User Stories come from the XP world and in the essence of them was a shift from writing requirements to talking about them. Basically the idea was: here’s a deck of cards (the ones you can write one). Start writing in each of them what the system should do.&lt;/p&gt;

&lt;p&gt;Everyone knows as well that there is a template for writing good user stories. The template goes something like this:&lt;/p&gt;

&lt;p&gt;As a &lt;em&gt;type of user&lt;/em&gt; I want &lt;em&gt;goal&lt;/em&gt; so that &lt;em&gt;some reason&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is a template for writing an acceptance criteria as well that goes something like:&lt;/p&gt;

&lt;p&gt;Given &lt;em&gt;some context&lt;/em&gt;&lt;br /&gt;
When &lt;em&gt;an action is carried out&lt;/em&gt;&lt;br /&gt;
Then &lt;em&gt;a particular set of observables consequences&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course in my early days, I followed these templates strictly. Not anymore. I found many examples where it just didn’t make sense to express what is need to be done this way. I’ll just give one, which is a mobile application that I was working on last year where the development that was needed was to translate a mobile screen that was already designed into the application. There was no functionality, just showing data brought from a backend. I saw there were user stories written, but they were just an incomplete duplication from what was already described in the design. We all know the evils of duplication in software development, right?&lt;/p&gt;

&lt;p&gt;So what is not negotiable for me:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A story should show something new to the final user. In other words, the user should see a difference from what is been built in this US. To users used to other methodologies, this is a big imposition (and there’s a lot of resistance). But think about the benefits. We’ll show actual stuff to the final users really fast and we will be able to use their feedback!&lt;/li&gt;
&lt;li&gt;A story should fit an iteration: Scrum prescribes iterations (and iterations are good!). To make iterations we need to have small enough items to fit iterations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And there isn’t much more. In the end, what is really important is that team knows how to write these items so that everyone understands the scope as precisely as possible and in the simplest, non duplicated fashion. Be smart to find this way in your particular project. Don’t follow recipes just because is recommended. Always think about the rationale and optimize according to your needs.&lt;/p&gt;

&lt;h2 id=&#34;who-writes-user-stories&#34;&gt;Who writes User Stories?&lt;/h2&gt;

&lt;p&gt;The Scrum Guide says there is a Product Owner entitled with the responsibility of building and managing the backlog. It even says he is responsible for the ROI of the project. Do you think this makes sense? Unless the project is really small, do you think one person has the necessary expertise to be able to do this? The business could be complicated enough to need more than one person and added to this, there could be other areas (UX for example) working actively in the definition of the backlog. Again, think of what is important. The important thing when this role is shared is to agree on what needs to be built and to transmit this information coherently to the development team.&lt;/p&gt;

&lt;h2 id=&#34;a-note-about-the-tool&#34;&gt;A Note about the Tool&lt;/h2&gt;

&lt;p&gt;That manages the backlog of course. What does it need? Not much I believe. It needs to be very comfortable for the people that creates and manages the stories to write them and prioritize them. Prioritization needs to be performed dragging and dropping. It could have a taskboard which would be used if the team is not colocated (i.e. for co-located teams, the physical taskboard is much more efficient as it’s a constant information radiator). Of course, for Scrum it should support iterations (Trello is an amazing tool, but it doesn’t support them). For the graphs, I believe the Release Burndown is important and the Cumulative Workflow Diagram could be useful to measure the lead time and sense the Work in Progress.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Being the backlog guy, of course I’ll advocate for it. The backlog is a great tool to manage the items necessary to build a product. The backlog should be light, there should be no duplicated information and it should be simple to create and maintain. The tool used to create the backlog should support this (in fact, what is important is that USs are written easily and prioritization can be performed in a snap, dragging and dropping).&lt;/p&gt;

&lt;p&gt;Images courtesy of FreeDigitalPhotos.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MVP&#39;s: The Real Deal</title>
      <link>http://egutter.github.io/prueba-blog/2014/11/07/mvps-the-real-deal/</link>
      <pubDate>Fri, 07 Nov 2014 11:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2014/11/07/mvps-the-real-deal/</guid>
      <description>&lt;p&gt;We all know how it goes: An idea strikes our mind, and before we notice, hands are already on our keyboard, our favourite IDE wide open, (luckily a bit of brainstorming) and a product is born.&lt;/p&gt;

&lt;p&gt;Yeah yeah, we all know we should hold the horses and make some state-of-the-art research. With ease we talk ourselves into believing that most of it sucks (compared with the product in our minds). We can do it way better, and everyone will love it, because everyone needs it. Code-blocks on it!&lt;/p&gt;

&lt;p&gt;Some hard-work and long-night weeks go by, and now we have our first MVP, our minimal viable product, something to show to our early-adopters and check what happens. It may not be definitive, but hey! this is Agile, we are doing Iterative-incremental development here!&lt;/p&gt;

&lt;p&gt;This is the moment where fantasy starts to fall apart. Our early-adopters do not adopt it as much as we wished. We realize our solution may not be as compelling as we thought, or maybe the customer pain we were trying to relieve was not as significant as we originally thought. User feedback indicates it’s time to pivot, make a value-proposition switch, maybe change our entire business model, hence most of what we have been (luckily just) coding.&lt;/p&gt;

&lt;p&gt;As a both freelance and enterprise developer, as well as novice entrepreneur, I have seen (and experienced) this scenario countless times, across a wide project-scale spectrum. And I have to admit, until some months ago, this was the moment when I felt kind of relieved and said “*Oh god, good thing I got this information at such an early stage. This saved me tons of resources and wasted effort*”.&lt;/p&gt;

&lt;p&gt;But what about this: &lt;strong&gt;Was there any way I could have saved more resources and avoided even this wasted effort?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By all means, the answer is Yes. But be aware fearless reader! You will have to dig into some dark zones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you imagine letting prospective users interact with a paper version of your product and ask someone to click a “link” on a paper with their index finger?&lt;/li&gt;
&lt;li&gt;Do you conceive testing the market response to an AI based solution without any real AI implementation but manual work instead?&lt;/li&gt;
&lt;li&gt;What about spending some of your scarce budget on customer profiling before ANY coding?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scary, I know.&lt;/p&gt;

&lt;p&gt;The purpose of this article is to get right what most of us got wrong in the first place about MVPs: &lt;strong&gt;An MVP it&amp;rsquo;s something that only exists in order to help us learn about our customers and their behaviour&lt;/strong&gt;.
This hides the fact that an MVP may not even be an iteration of our product, just an &amp;ldquo;experiment&amp;rdquo; designed for discovery purposes. And this is, for most of us, a quite uncomfortable idea. Our comfort-zone relies on the build -&amp;gt; deliver flow, and anything else feels just upside-down. At least at the beginning.&lt;/p&gt;

&lt;p&gt;Remember your early days with TDD? When you were not yet &lt;em&gt;test-infected&lt;/em&gt;? You may remember that first awkwardness of coding the &lt;strong&gt;what&lt;/strong&gt; prior to the &lt;strong&gt;how&lt;/strong&gt;. You may remember it, but now TDD has become second nature to you and anything else probably feels kind of blind-walking, right?&lt;/p&gt;

&lt;p&gt;Well, now think about an &lt;em&gt;mvp-infected&lt;/em&gt; state, where any feature you choose to build, has an mvp-guided customer-side validation that ensures there is a value for your customers behind it&amp;hellip;. What a sweet road to walk through!&lt;/p&gt;

&lt;p&gt;Some advice though: be as sure as you can of what you are hoping to measure (learn) with an MVP. Or leastwise, keep firmly in mind what you are &lt;strong&gt;NOT&lt;/strong&gt; trying to validate. As said, our unconscious will struggle to find external approval (comfort) in every aspect it can, and deviate our attention from the specific purpose of the MVP.&lt;/p&gt;

&lt;p&gt;There are lots of known ways to achieve this, we all know (or should) books like &lt;a href=&#34;http://theleanstartup.com/&#34;&gt;The Lean Startup&lt;/a&gt; (Eric Ries) and &lt;a href=&#34;http://www.guykawasaki.com/the-art-of-the-start/&#34;&gt;The Art of the Start&lt;/a&gt; (Guy Kawasaki), two great books that bring a warehouse of real-life examples of successful MVP’s. However there is no proven methodology behind MVP’s and the best way to answer your specific market questions will probably emerge from creativity and some lateral thinking.&lt;/p&gt;

&lt;p&gt;However, just so you can take some real example out of this article, I will share some pictures of a successful MVP user testing session conducted for a project I was part of. Potential users were presented a “wireframed” version of a web application in plain paper, and they were asked to perform specific tasks on it, using their hands as mouses, to finally get their feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://egutter.github.io/prueba-blog/images/mvps-the-real-deal_1.jpg&#34; style=&#34;width: 227px;&#34; /&gt;
&lt;img src=&#34;http://egutter.github.io/prueba-blog/images/mvps-the-real-deal_2.jpg&#34; style=&#34;width: 227px;&#34; /&gt;
&lt;img src=&#34;http://egutter.github.io/prueba-blog/images/mvps-the-real-deal_3.jpg&#34; style=&#34;width: 227px;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This was a highly rewarding experience and you would probably be surprised to see how involved users became and how much information we collected, from both their words and their behaviour.&lt;/p&gt;

&lt;p&gt;Great MVP’s are born from deeply understanding how little we know about our customers and how crucial this is for the success of our venture.&lt;/p&gt;

&lt;p&gt;Good luck getting to know your customer!&lt;/p&gt;

&lt;p&gt;P.S. If you are comfortable with spanish, take a look at &lt;a href=&#34;http://blog.10pines.com/2014/10/28/lean-sales-up/&#34;&gt;this post&lt;/a&gt;, wich gives a highly interesting approach of lean principles applied to the sales process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lean Sales Up - Ágiles 2014</title>
      <link>http://egutter.github.io/prueba-blog/2014/10/28/lean-sales-up/</link>
      <pubDate>Tue, 28 Oct 2014 10:05:44 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2014/10/28/lean-sales-up/</guid>
      <description>&lt;p&gt;El proceso de preventa puede ser doloroso, largo y costoso.
Es el primer punto de negociación. Hay que convencer al otro que somos la mejor opción. Y hay que ajustar las expectativas siempre altas del cliente.
Sin embargo existe una forma de mejorar y llegar a un balance, donde el cliente y el proveedor se sientan seguros y conformes. En esta sesión exploraremos como conjugar el proceso delicado y “costoso” de la venta con los principios ágiles de lean.&lt;/p&gt;

&lt;p&gt;Reflexionaremos como identificar que es lo que realmente agrega valor en una propuesta de servicios o contrato. Y para esto, nos apoyaremos en ejemplos y experiencias reales, que acompañaran cada concepto e idea expuestos.
El objetivo es mostrar como empezar a crear valor desde el momento cero. Crear valor desde la venta del proyecto.&lt;/p&gt;

&lt;p&gt;Video de la presentación:&lt;/p&gt;

&lt;p&gt;{% youtube 9VBtHOuF_Hw %}&lt;/p&gt;

&lt;p&gt;Slides de la charla:&lt;/p&gt;

&lt;p&gt;{% prezi 4iuv5n1x6itx %}&lt;/p&gt;

&lt;p&gt;Facilitacion gráfica de la charla por &lt;a href=&#34;https://twitter.com/claumsandoval&#34;&gt;@claumsandoval&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;es&#34;&gt;&lt;p&gt;Resumen visual de mi charla &amp;quot;lean sales up&amp;quot; Siempre quise uno! gracias &lt;a href=&#34;https://twitter.com/claumsandoval&#34;&gt;@claumsandoval&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Agiles2014?src=hash&#34;&gt;#Agiles2014&lt;/a&gt; &lt;a href=&#34;https://twitter.com/10pines&#34;&gt;@10pines&lt;/a&gt; &lt;a href=&#34;http://t.co/Y6r3UXnTCO&#34;&gt;pic.twitter.com/Y6r3UXnTCO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jorge Silva (@jor_silva) &lt;a href=&#34;https://twitter.com/jor_silva/status/526119881415340032&#34;&gt;octubre 25, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Existentialism</title>
      <link>http://egutter.github.io/prueba-blog/2014/09/23/software-existentialism/</link>
      <pubDate>Tue, 23 Sep 2014 21:07:34 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2014/09/23/software-existentialism/</guid>
      <description>

&lt;p&gt;A few days ago, in an interesting discussion I was having in a local Agile forum, someone posted the phrase:
&amp;gt; Doing the right thing precedes doing things right&lt;/p&gt;

&lt;p&gt;The phrase caught my attention and as the author didn&amp;rsquo;t give much explanation of it and given I am an early adopter of the Cartesian method &lt;em&gt;doubt of everything until you can prove it&amp;rsquo;s true by yourself&lt;/em&gt;, I&amp;rsquo;ve decided to spend some time thinking carefully through it.&lt;/p&gt;

&lt;p&gt;First, a quick overview of the difference between both in the context of this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Do the right thing&lt;/em&gt; is to deliver the product that satisfies or exceeds the market&amp;rsquo;s expectation. In other words, delivering the valuable features the users need.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Doing things right&lt;/em&gt; is to build the product correctly. Deliver a product without bugs, which is simple to use and easy to understand. Most important, designed and coded in such way that it can easily evolve and change.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;existentialism&#34;&gt;Existentialism&lt;/h1&gt;

&lt;p&gt;One of the first things that caught my attention from the phrase is that it resembles the famous phrase from Jean Paul Sartre &lt;strong&gt;l&amp;rsquo;existence précède l&amp;rsquo;essence&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.
This phrase summaries the existentialism school of thought by claiming there is no purpose nor destiny the man comes to fulfill to the world. The man is &lt;strong&gt;thrown&lt;/strong&gt; to the world and all possibilities are open to him. It is through his life (existence) that each man finds his own meaning.
Nobody is born good or evil, hero or villain, brave or coward.  We choose ourselves through our actions and we become the consequences of our decisions. We might say the essence answers the question of &lt;strong&gt;What?&lt;/strong&gt; is the man and the existence answers &lt;strong&gt;How?&lt;/strong&gt; does the man lives.&lt;/p&gt;

&lt;p&gt;Then, what is then the &lt;strong&gt;essence&lt;/strong&gt; of software? In my opinion, it should be delivering the right product to the market. The purpose of a software program is to satisfy the users needs. Otherwise, it&amp;rsquo;s useless and has no reason to be.
On the other hand, doing things right or wrong, resembles to its existence, as it focus more on the &lt;strong&gt;How?&lt;/strong&gt; the software is built.&lt;/p&gt;

&lt;p&gt;Following strictly the existentialism metaphor, we might think that contrary to the opinion I read on the forum, &lt;strong&gt;doing things right precedes doing the right thing&lt;/strong&gt;. However, believing the human condition is existentialist doesn&amp;rsquo;t prove the software condition is existentialist as well. So, I will try to prove this is true from my own experience of building software.&lt;/p&gt;

&lt;h1 id=&#34;lean-startup&#34;&gt;Lean Startup&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s imagine we are a startup company. We have read Eric Ries Lean Startup&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; book twice and we are ready to start with our first minimum viable product (MVP) in order to test the market and validate our ideas.&lt;/p&gt;

&lt;p&gt;In order to decide whether &lt;strong&gt;do the right thing&lt;/strong&gt; leads to &lt;strong&gt;doing things right&lt;/strong&gt; or vice versa, we must explore the different combinations. We all know that &lt;strong&gt;doing the wrong thing and doing things wrong&lt;/strong&gt; at the same time is the worst scenario, so we can discard it. And of course, &lt;strong&gt;doing the right thing and doing things right&lt;/strong&gt; is the best choice, so we are not interested on it either.
The two scenarios we care about are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doing the right thing, but doing things wrong.&lt;/li&gt;
&lt;li&gt;Doing the wrong thing, but doing things right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start with the latter. Given nobody has the crystal ball to see into the future it&amp;rsquo;s very likely that we will start by doing the wrong thing. We need to find which is the right thing, so we need to explore our ideas and test the market to get feedback from it. This is called &lt;strong&gt;to pivot&lt;/strong&gt; in the Lean Startup jargon. However, given we are doing things right, once we get feedback from the market we will have the ability and skills to rapidly change our product: add new features, remove the useless stuff and leave some functionality unchanged still working as expected.&lt;/p&gt;

&lt;p&gt;On the other hand, let&amp;rsquo;s say we were so lucky we find the right thing, while doing things wrong. What happens next? The technical team hopefully will want to start improving the product and do things right, while the business team will be eager to keep adding features to the product and release a new version after the MVP in order to get more users and start making some real money. Do you notice the tension? Who do you think will win the argument?
It could even be worse, doing things wrong could also affect the end users: bugs; functionality hard to understand and use; system too slow or exposed to security leaks; etc. When users start complaining and expressing their frustration it becomes hard to know whether it is because the product is not the right thing they need or because doing things wrong have affected them too much.
Not so far in the future, our startup company might begin to lose market share. The technical team won&amp;rsquo;t have the ability to add more features easily and the rate of issues introduced will grow faster than the rate of problems solved. Maybe another company will take your idea and deliver the same product doing it much better.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Many people think that given you don&amp;rsquo;t know if you&amp;rsquo;re doing the right thing, then it&amp;rsquo;s better to invest as little as possible and get things done no matter how. However, not knowing if you&amp;rsquo;re doing the right thing, doesn&amp;rsquo;t mean that you aren&amp;rsquo;t doing it! Neither, it means that you will never learn from the market and at some point stop doing the wrong thing to start doing the right one. Then, when is it a good time to stop doing things wrong and start doing them right? Most probably the time will never come and the further you go on the wrong path the harder will be to get straight.&lt;/p&gt;

&lt;p&gt;Doing the right thing requires creativity and exploration. It&amp;rsquo;s very likely you will need to pivot several times before finding the right thing. Your ability to change and adapt your product fast and smoothly is one of the keys to success and &lt;strong&gt;doing things right&lt;/strong&gt; is the best way to ensure this will be possible.&lt;/p&gt;

&lt;p&gt;Now that I realized I am both an advocate of human and software existentialism, I can say to myself:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Doing things right precedes doing the right thing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those who come this far and are interested in the subject, you might continue reading other posts&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; I found while writing this article.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Existence_precedes_essence&#34;&gt;Existentialism on Wikipedia&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://theleanstartup.com/principles&#34;&gt;Lean Startup principles&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;An article from &lt;a href=&#34;http://www.djaa.com/why-doing-things-right-should-lead-doing-right-thing&#34;&gt;David Anderson&lt;/a&gt; and another one from &lt;a href=&#34;http://allankelly.blogspot.com.ar/2013/06/do-it-right-then-do-right-thing-online.html&#34;&gt;Allan Kelly&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Rethinking Estimations</title>
      <link>http://egutter.github.io/prueba-blog/2014/03/21/rethinking-estimations/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2014/03/21/rethinking-estimations/</guid>
      <description>

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;When someone asks for an estimate I always think of this.&amp;#10;&amp;#10;&lt;a href=&#34;https://twitter.com/hashtag/NoEstimates?src=hash&#34;&gt;#NoEstimates&lt;/a&gt; &lt;a href=&#34;http://t.co/siZsVxs3D4&#34;&gt;pic.twitter.com/siZsVxs3D4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Griffith (@Aaron_Griffith) &lt;a href=&#34;https://twitter.com/Aaron_Griffith/statuses/444547284416475136&#34;&gt;March 14, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not like estimations are like this, right? This post is a trigger to
rethink estimations. To rethink why we do them, how much do we invest on them,
what is their ROI. Should we estimate or not? If you think why you estimate in
real life, you wouldn&amp;rsquo;t think there could be something dangerous about them. We
all estimate how much it would take us to get to the bus station before going,
right?. However, things get much more complicated in software projects and in
organizations.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a few problems I&amp;rsquo;ve seen lately that may turn estimations into dangerous,
deceiving practices and could deviate them from their original purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Translating points to hours&lt;/li&gt;
&lt;li&gt;Re-estimating stories&lt;/li&gt;
&lt;li&gt;Treating estimations as commitments&lt;/li&gt;
&lt;li&gt;Investing more time estimating than actually doing it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;translating-points-to-hours&#34;&gt;Translating points to hours&lt;/h2&gt;

&lt;p&gt;This means using a story point that is converted to a number of hours (e.g. 4 or
8 hs). You estimate then using these &amp;lsquo;story points&amp;rsquo;. But are they really story
points? I think they aren&amp;rsquo;t,  they are just a broader unit than the hour to
perform time estimations. Let&amp;rsquo;s dig a bit further into the concept of story
point. A story point is a relative measure of effort. The idea is really simple.
If I have Task A estimated in 1 point and we think Task B would take double the
time, we put 2 points to Task B. We don&amp;rsquo;t know how long it will take A, but we
know B would take double the time. Is that simple. The story point is an
abstract concept because it amalgamates a few different factors in one, such as
the effort, the uncertainty, the risk, etc into a number, the story point. But
the most important thing is that this number is relative, it doesn&amp;rsquo;t represent
anything per se. It represents something when compared to the other estimated
stories in the same backlog. The rationale behind this way of estimating is that
&amp;ldquo;Humans are actually better at relative estimates, than precise measurements&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;With this relative measurements, the team&amp;rsquo;s velocity can be calculated over the
first few iterations and with this velocity, a more precise schedule can be
constructed. The only pre-requisite for it to work is that these estimates are
consistent among them. As Mike Cohn says in his
&lt;a href=&#34;http://www.amazon.com/Agile-Estimating-Planning-Mike-Cohn/dp/0131479415&#34;&gt;&amp;ldquo;Agile Estimating and Planning&amp;rdquo; book&lt;/a&gt;, velocity is the great equalizer.&lt;/p&gt;

&lt;p&gt;{% blockquote %}
&lt;strong&gt;Velocity Is The Great Equalizer&lt;/strong&gt;
What&amp;rsquo;s happened here is that velocity is the great equalizer. Because the estimate for each feature is made relative to the estimates for other features, it does not matter if our estimates are correct, a little incorrect, or a lot incorrect. What matters is that they are consistent. We cannot simply roll a die and assign that number as the estimate to a feature. However, as long as we are consistent with our estimates, measuring velocity over the first few iterations will allow us to hone in on a reliable schedule.
{% endblockquote %}&lt;/p&gt;

&lt;p&gt;But this work for story points that are relative. I am a bit eery of using the
same name to identify something that is different in nature because is basically
another measure of time. If velocity is measured, it needs to be clear that we
are relativizing these numbers, we are converting them into this abstract number
which is the story point. A practice that I have been using pretty successfully
for a few years is that of relativizing estimations during the progress of the
project. Teams that are used to estimate releases in days, they could do so.
However, when I measure the velocity, I measure how many of these &amp;lsquo;points&amp;rsquo; the
team is able to complete (averaging them over the sprints). Same with the
sprints estimations. If the team estimates all its tasks in hours, they could
keep doing it but measure the actual number they are able to complete and use
this number as &lt;a href=&#34;http://martinfowler.com/bliki/YesterdaysWeather.html&#34;&gt;yesterday&amp;rsquo;s weather&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;re-estimation&#34;&gt;Re-estimation&lt;/h2&gt;

&lt;p&gt;When should we re-estimate? In short, re-estimation should only occur &lt;strong&gt;when we
are certain we gained knowledge about the effort to come&lt;/strong&gt;. We re-estimate
because we understand better what lays ahead. Consider you are working on a
Sprint and you realize the story you are working on is bigger than what you
originally thought it was. Should you re-estimate it? Let&amp;rsquo;s look at a couple of
examples (from real life!) before answering the question.&lt;/p&gt;

&lt;p&gt;Let me tell you something that I&amp;rsquo;ve seen many times (simplifying the numbers to
make it simple): We had a backlog of 100 story points and we committed to
deliver 10 story points in the iteration (the projection was we were going to
need 10 sprints to finish). Of course things went awfully bad during the
iteration and we were able to finish just half of what we committed to, 5
points. Thinking about the reasons, we came to the conclusion that these stories
that we completed were much larger that what we originally thought (of course we
found things we didn&amp;rsquo;t foresee. It always happens) and therefore we re-estimated
them (the stories we completed) to be 2 times bigger. After this re-estimation,
the numbers showed that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We completed 10 story points&lt;/li&gt;
&lt;li&gt;We had 95 story points remaining on the backlog&lt;/li&gt;
&lt;li&gt;We needed 10 more iterations to finish&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the problem with this? We did it without thinking carefully about the
remaining stories. In hindsight, we cheated ourselves into believing that these
stories were bigger than others we estimated in the same size and therefore we
needed, at most, one extra sprint to finish. Of course, this wasn&amp;rsquo;t true. Most
stories that came afterwards contained unforeseen things as well and the number
of sprints required to finish was closer to 20, not 11. In other words, our
velocity was near 5, not 10 in the first place and we shouldn&amp;rsquo;t have done any
re-estimation at all.&lt;/p&gt;

&lt;p&gt;The last story was using story points, but I&amp;rsquo;ve had my experiences with hours as
well. Let me tell you this (imaginary) one: we included 10 20hr stories in our
sprint (200 hrs of a total backlog of 2000 hrs). We started working and realized
the first stories were bigger than what we thought they were going to be. Twice
as big. We re-estimated them in 40hrs instead and we completed 5 stories. So we
&amp;lsquo;burned&amp;rsquo; 200 hrs out of 2100 hrs. Wait wait.. We burned 200 hrs? And we worked
200 hrs? We knew we were going to work 200 hrs. before starting the sprint
anyway, right? But did we get any insight about the remaining work?&lt;/p&gt;

&lt;p&gt;Has any of this happened to you? I believe we fall too often into the trap of
believing that what we have just completed is bigger than estimated and what
lays ahead will not. We, generally, are optimists. Or we just re-estimate
without caring about the rest of the backlog. This is a real mistake. So the
question is: when should you re-estimate? I believe that you should re-estimate
when you are sure you understand how the current work impacted the remaining
one. In other words, if you are certain that the feature you built is double
than others with the same size, do it. &lt;strong&gt;When in doubt, don&amp;rsquo;t re-estimate. Let
the iterations flow. Measure and average your velocity&lt;/strong&gt; (velocity is the great
equalizer, remember?).&lt;/p&gt;

&lt;h2 id=&#34;treating-estimation-as-commitments&#34;&gt;Treating estimation as commitments&lt;/h2&gt;

&lt;p&gt;Collaboration over contract negotiation. It&amp;rsquo;s among the
&lt;a href=&#34;http://agilemanifesto.org/&#34;&gt;4 agile values&lt;/a&gt;. We all know collaboration between the business and the
team is of paramount importance in agile development. It doesn&amp;rsquo;t work without
it. We all know that estimations are just another criteria that helps the
business prioritize and build plans. We all know as well that estimations are
just that&amp;hellip; estimations. They can be wrong (the error will be bigger as
uncertainty is bigger). People that do plans are used (or they should) to make
them with this in mind, playing with probabilities and statistics. So why do so
many people try to treat them as commitments? Treating estimations as
commitments could trigger a myriad of dysfunctional behaviors that could kill
collaboration very easily. Padding estimations to be on the &amp;lsquo;safe side&amp;rsquo;.. Or
&amp;lsquo;refactoring some code, since we are below the estimate and there is time..&amp;rsquo;.
Or the worst of all. The development team unwilling to change things because
they will go over their estimations. Those examples are the result of lack of
trust &amp;amp; collaboration. And these innocent estimates could be the culprit.&lt;/p&gt;

&lt;p&gt;So how should we treat estimations? We should treat them as that, estimations.
The development team does estimations as good as they can. Business understands
estimations are made with uncertainty and have error margins. The objetive after
all is creating value, as a collaborating team and estimations are just another
tool that helps us deliver better value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So please, please: Don&amp;rsquo;t ever ever treat estimations as commitments!!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;spending-more-time-money-than-actually-doing-it&#34;&gt;Spending More Time/Money than actually doing it&lt;/h2&gt;

&lt;p&gt;Imagine you want to buy a laptop, and you aren&amp;rsquo;t sure whether to buy the top of
the line apple mac book pro or the Dell one that seems to have the same features
at a cheaper price. Apple is $2000 and the Dell is $1500. As you aren&amp;rsquo;t sure if
the Mac is worth those $500, you hire a consultant who charges you $500 to give
you a consultancy report. There you go! The report says you should buy a Dell.
And you just spent $2000!! :P This is really silly, but believe me, it happens
much more than we think. Yeah, &lt;strong&gt;sometimes we spend more time/money estimating
a feature than actually coding it&lt;/strong&gt;. This happens without us realizing,
disguised in endless meetings with many programmers discussing how to implement
a tiny bit of functionality (perhaps a couple of guys discussing and the rest
looking/sleeping/etc). Just think about this: Imagine there&amp;rsquo;s a small story,
around a day long, and 10 guys estimating it with planning poker. How much does
this estimation cost? With a few minutes, it could be near the cost of building
it. So always bear in mind how much time you are spending (actually investing)
estimating and make sure it&amp;rsquo;s worthy!! If there&amp;rsquo;s a lot of people in the room
and &lt;strong&gt;the story that is about to be estimated is small and doesn&amp;rsquo;t have much
importance, don&amp;rsquo;t worry that much about it!&lt;/strong&gt; You think is about a day. Fine.
Don&amp;rsquo;t waste time trying to figure out if it will be 6 hrs or 10 hrs! Invest your
money where it&amp;rsquo;s worth!&lt;/p&gt;

&lt;h2 id=&#34;what-about-not-estimating&#34;&gt;What about not estimating?&lt;/h2&gt;

&lt;p&gt;There is an interesting wave of thinking that proposes dropping estimations
completely (&lt;a href=&#34;https://twitter.com/search?q=%23noestimates&amp;amp;src=tyah&#34;&gt;#NoEstimates&lt;/a&gt;), focusing on delivering the most
important features quickly and measuring the cycle time. If the team knows it&amp;rsquo;s
capacity is to deliver X features weekly, there&amp;rsquo;s no need to perform any
estimations (even better if those X features can be deployed to production).
Estimating is waste, after all. It doesn&amp;rsquo;t add any value to the product. Working
this way fits perfectly in pull processes and leads to leaner ways of managing
the backlog and a more mature way of working. This fits perfectly in projects
with a lot of churn as well. Why trying to predict what is going to happen in 2
months if we can&amp;rsquo;t predict what will happen in 2 weeks? Probably is better to
select the most important features, implement them and then ask again the same
question as suggested in &lt;a href=&#34;http://zuill.us/WoodyZuill/2012/12/10/no-estimate-programming-series-intro-post/&#34;&gt;this post&lt;/a&gt;. After all, &lt;a href=&#34;http://leansoftwareengineering.com/ksse/scrum-ban/&#34;&gt;&amp;ldquo;the ideal work planning process should always provide the development team with best thing to work on next, no more and no less. Further planning beyond this does not add value and is therefore waste.&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;To conclude, here&amp;rsquo;s just a few advices you need to bear in mind when performing
estimations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Estimations are just a tool and so they should be used when it is appropriate
and for what they are useful for.&lt;/li&gt;
&lt;li&gt;Estimations are made with a level of uncertainty and they have an error
margin. This should be understood by everyone and plans need to be built with
this in mind and adjusted as more is learned.&lt;/li&gt;
&lt;li&gt;Estimations should not be treated as commitments. Doing so may hinder
collaboration and will certainly trigger dysfunctional behaviours that will turn
them useless.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t lose a lot of time estimating. You are not adding any value while
estimating and it may be an expensive endeavour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally. Something you should do for every practice and tool you use in your
methodology. &lt;strong&gt;Evaluate if it&amp;rsquo;s working. Retrospect. Ask yourself what is the
value it is providing and try to improve!&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://thepeoplesscrum.tumblr.com/book/dontestimate&#34;&gt;http://thepeoplesscrum.tumblr.com/book/dontestimate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/twallet/no-estimars&#34;&gt;http://www.slideshare.net/twallet/no-estimars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://programmers.stackexchange.com/questions/36810/whats-the-best-explanation-of-what-story-points-are&#34;&gt;http://programmers.stackexchange.com/questions/36810/whats-the-best-explanation-of-what-story-points-are&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=BAGain3T-xU&#34;&gt;http://www.youtube.com/watch?v=BAGain3T-xU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mountaingoatsoftware.com/blog/tag/story-points&#34;&gt;http://www.mountaingoatsoftware.com/blog/tag/story-points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zuill.us/WoodyZuill/2012/12/10/no-estimate-programming-series-intro-post/&#34;&gt;http://zuill.us/WoodyZuill/2012/12/10/no-estimate-programming-series-intro-post/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://leansoftwareengineering.com/ksse/scrum-ban/&#34;&gt;http://leansoftwareengineering.com/ksse/scrum-ban/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>agile 2011 slc we were there</title>
      <link>http://egutter.github.io/prueba-blog/2011/09/02/agile-slc-we-were-there/</link>
      <pubDate>Fri, 02 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2011/09/02/agile-slc-we-were-there/</guid>
      <description>

&lt;h2 id=&#34;news-from-salt-lake-city&#34;&gt;News from Salt Lake City&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://agile2011.agilealliance.org&#34;&gt;Agile2011&lt;/a&gt; is over. Back to where it all began. and with most of the people that initiated this movement, 10 years ago. For me, it was my first Agile conference and I must say it was a blast. Being able to hear these guys in the different sessions and talk to them in the hallways during the breaks was amazing.&lt;/p&gt;

&lt;p&gt;What I enjoyed the most? Let me think&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;sessions&#34;&gt;Sessions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://program2011.agilealliance.org/event/b690ae08f4f13473f126474f717e4eb9&#34;&gt;Mary&amp;rsquo;s&lt;/a&gt; one about design thinking. A complete a-ha moment, specially when she said that user stories often disguise bad design decisions. Wait a minute&amp;hellip; Isn&amp;rsquo;t it that User Stories just contain the what and not the how? (Thinking). How many times have I done it? Uhh, many&amp;hellip;Mary is still my hero.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://program2011.agilealliance.org/event/a7d860cb8f52a5c8b7122542a78795c5&#34;&gt;Jonathan Rasmusson&lt;/a&gt;, the Agile Samurai, gave a great introductory presentation on Agile, very funny, dynamic and with lots of pearls. He really left me thinking when he said that he recommends starting the road towards Agility with the technical practices (CI, TDD, pair programming) and then add a process. This isn&amp;rsquo;t the approach I&amp;rsquo;ve been recommending, but it really makes sense, right?&lt;/p&gt;

&lt;p&gt;Another session I was spying (alternating with my venue guide position) was &lt;a href=&#34;http://program2011.agilealliance.org/event/0f044b7827ea14f8c0594868db8f2c1f&#34;&gt;Pete Beherens&lt;/a&gt; session about &amp;ldquo;Agility Culture&amp;rdquo;. How important is the culture of the company for Agile to succeed or, in other words, how compatible is Agile with the different companies?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://program2011.agilealliance.org/event/946aa57ccc0faca9a94f39611e3c3323&#34;&gt;Esther&amp;rsquo;s&lt;/a&gt; session on team traps was great and she is such a nice person.&lt;/p&gt;

&lt;h2 id=&#34;the-park-bench&#34;&gt;The Park Bench&lt;/h2&gt;

&lt;p&gt;The Park Bench with the Manifesto Signer&amp;rsquo;s was awesome, very relaxed and with a lot of humour. It really allow us to take a glimpse to the backstage of that meeting in 2001.&lt;/p&gt;

&lt;h2 id=&#34;keynotes&#34;&gt;Keynotes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://agile2011.agilealliance.org/program/keynotes/&#34;&gt;Keynotes&lt;/a&gt; were great as well. People (in general) were very emotional with Friederickson&amp;rsquo;s and Linda Rising&amp;rsquo;s talks, but I gotta be honest. I am a developer with little connection with my emotions and so the keynote I enjoyed the most was &lt;a href=&#34;http://program2011.agilealliance.org/event/c996f21365162f7debad5971bbd1318d&#34;&gt;Code Session&lt;/a&gt;. Hilarious and interesting. He is such a good presenter.&lt;/p&gt;

&lt;h2 id=&#34;food-and-party&#34;&gt;Food and Party&lt;/h2&gt;

&lt;p&gt;Food, food and more food. I would have never imagined that Agilists care so much about food. I tried to resist it, but man, it was impossible.&lt;/p&gt;

&lt;p&gt;I hope the folks at &lt;a href=&#34;http://agiles2011.agiles.org/en&#34;&gt;Agiles&lt;/a&gt; do the same!!&lt;/p&gt;

&lt;p&gt;Besides all this, I enjoyed re encountering old friends from Agiles 2008 as Michah Martin and Dave Nicolette ant talking again with Pat Reed from The GAP. Of course I missed a lot of sessions I would like to see. It&amp;rsquo;s impossible to see them all. Well, hopefully next year!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>agile software development with smalltalk at smalltalks 2010</title>
      <link>http://egutter.github.io/prueba-blog/2010/11/12/agile-software-development-with-smalltalks-at-smalltalks-2010/</link>
      <pubDate>Fri, 12 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2010/11/12/agile-software-development-with-smalltalks-at-smalltalks-2010/</guid>
      <description>&lt;p&gt;Click &amp;lsquo;Read on&amp;rsquo; to see the presentation&lt;/p&gt;

&lt;p&gt;{% slideshare 5754977 %}&lt;/p&gt;

&lt;p&gt;View more &lt;a href=&#34;http://www.slideshare.net/&#34;&gt;presentations&lt;/a&gt; from &lt;a href=&#34;http://www.slideshare.net/silvajorge&#34;&gt;10Pines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>agiles 2010: story mapping - un enfoque visual a la construcción del product backlog</title>
      <link>http://egutter.github.io/prueba-blog/2010/10/22/agiles-2010-story-mapping-un-enfoque-visual-a-la-construccion-del-product-backlog/</link>
      <pubDate>Fri, 22 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2010/10/22/agiles-2010-story-mapping-un-enfoque-visual-a-la-construccion-del-product-backlog/</guid>
      <description>&lt;p&gt;Click &amp;lsquo;Read on&amp;rsquo; to see the presentation&lt;/p&gt;

&lt;p&gt;{% prezi ickvpa0kgxnc %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://prezi.com/ickvpa0kgxnc/agiles-2010-story-mapping-un-enfoque-visual-a-la-construccion-del-product-backlog/&#34;&gt;Ágiles 2010 - Story mapping: un enfoque visual a la construcción del Product Backlog&lt;/a&gt; on &lt;a href=&#34;http://prezi.com&#34;&gt;Prezi&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>presentación agiles 2010 - automatización del deployment</title>
      <link>http://egutter.github.io/prueba-blog/2010/10/13/presentacion-agiles-automatizacion-del-deployment/</link>
      <pubDate>Wed, 13 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2010/10/13/presentacion-agiles-automatizacion-del-deployment/</guid>
      <description>&lt;p&gt;Las metodologías ágiles son muy claras respecto al siguiente punto: todas las tareas repetitivas que se realizan en forma manual deben ser automatizadas!
Existen actualmente excelentes herramientas que nos ayudan a automatizar el build, las ejecuciones de los tests y el deployment de aplicaciones, pero comenzar a utilizarlas no siempre es una tarea trivial. En esta sesión presentaremos Maven junto con un grupo de plugins y herramientas que nos ayudaran a automatizar las tareas rutinarias cuando trabajamos con una gran aplicación multi-módulo Java enterprise.&lt;/p&gt;

&lt;p&gt;{% prezi falkmnmwci_y %}&lt;/p&gt;

&lt;p&gt;El código se encuentra disponible &lt;a href=&#34;http://code.google.com/p/biblioteca-10pines/&#34;&gt;aquí&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile is clean code</title>
      <link>http://egutter.github.io/prueba-blog/2010/06/22/agile-is-clean-code/</link>
      <pubDate>Tue, 22 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2010/06/22/agile-is-clean-code/</guid>
      <description>

&lt;p&gt;But &amp;hellip; Isn&amp;rsquo;t this a requirement for all approaches? Why do I have the impression that in Agile, the technical aspect is more important? When I was at University, I remember vividly having heard (and unfortunately later repeated) that the programmer had one of the less important tasks in the chain of producing software. The most important, more senior and smarter people are the architects/designers that analyse and design the application, giving the programmers some diagrams that they &amp;lsquo;just&amp;rsquo; have to translate into code. That seemed like an easy task!!&lt;/p&gt;

&lt;h2 id=&#34;what-means-clean-code&#34;&gt;What means Clean Code?&lt;/h2&gt;

&lt;p&gt;Ron Jeffries says that we should write &amp;ldquo;clean code that works&amp;rdquo;. Uncle Bob then made an entire book of Clean Code. What is clean code? Following uncle Bob&amp;rsquo;s explanation, at the high level, it is code that is well structured and which follows SOLID design principles. At a lower level, it&amp;rsquo;s code that has meaningful names, good and useful comments, elegant functions and formatted code. It&amp;rsquo;s code that expresses the intent of the developer in a clear way. It&amp;rsquo;s code that contains no duplication. And is code that is easy to understand.&lt;/p&gt;

&lt;p&gt;And how do you know it works? You don&amp;rsquo;t know because you code it and you are a great programmer :-). You know it because there are automated tests that certify it. Agile development relies on test automation to know that features work and to know thay they do all the time. Beck says &amp;ldquo;Software features that can&amp;rsquo;t be demonstrated by automated tests simply don&amp;rsquo;t exist&amp;rdquo;. Test automation is one of the pillars of clean code because it allows to continually refactor, it allows to redesign and ultimately it allows to deliver a continuous flow of value.&lt;/p&gt;

&lt;h2 id=&#34;why-is-so-important-in-agile&#34;&gt;Why is so important in Agile?&lt;/h2&gt;

&lt;p&gt;These are a few reasons to justify the &amp;lsquo;pain&amp;rsquo; of writing better code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;** Cost of Change is lowered:** Agile welcomes change, even late in the development process. However, to be able to change, it should be cheap to change. Code that is well designed, easy to read and thoroughfully tested is easy to change and can be changed without fear of introducing new bugs. On the contrary, code that is hard to understand, is not well modularized and has no automated tests is difficult to change and the risks of introducing bugs while modifying it are many.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Iterative &amp;amp; Incremental Development means more time coding:&lt;/strong&gt; In sequential development, there are big phases of analysis and design before the coding phase starts. When the code phase starts, most of the design decisions should have been taken, so development proceeds fast. In Agile, development starts earlier so this phase takes more time. As the code base needs to be manipulated for a longer time, it pays to have it clean. Reading Clean Code, one of the a-ha moments that I had was in the chapter where Martin explains that in the life of a system, the majority of the time is spent reading code, not writing it. I started thinking about my experience, and that was entirely true. I have worked in many systems that already have a lot of features in it. In those systems, each time that I needed to add a new feature, I spent most of my time finding where to put the feature and how to accomodate it to the existing features than actually coding it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://agilebooknote.blogspot.com/2010/02/agile-is-iterative-and-incremental.html&#34;&gt;Iterative &amp;amp; Incremental Development&lt;/a&gt; means the code is changed frequently:&lt;/strong&gt; Design is performed incrementally in Agile. Every iteration, new features are included in the code base. The design of the system should be one that cares about all features included until that moment. Therefore, this means that a lot of times the existing design needs to be modified. If the code is not maintained clean, understanding and modifying it may become difficult in a short period of time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Working software is more important than Comprehensive Documentation:&lt;/strong&gt; This is what the &lt;a href=&#34;http://www.agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; says. But having the code base in good state, with good comments, good names, well modularized and with a comprehensive set of automated tests is the best documentation that a developer may have. Been able to understand a piece of code easily because it&amp;rsquo;s simple and it expresses its purpose with clarity is much better than going through UML design documents. Being able to run and debug a set of unit tests for certain functionality provides the best tool to understand that functionality. After all, what really happens is what is in the code, not what is in the documentation. Code is always up to date while documentation is hard to maintain.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;why-don-t-we-do-it-then&#34;&gt;Why don&amp;rsquo;t we do it then?&lt;/h2&gt;

&lt;p&gt;Lack of skill? Sometimes&amp;hellip; This is a craft. A difficult one and we need to spend a lot of time getting better on it. Commitments.. Yes. Our own commitments and the commitments of our managers. Being under pressure and with the deadlines on sight, make it &amp;lsquo;work&amp;rsquo; takes another meaning (I mean, you just want to throw some code that at least compiles and shows something on the screen). I won&amp;rsquo;t follow. There are always plenty of reasons to do things worse!!&lt;/p&gt;

&lt;h2 id=&#34;humm-but-scrum-doesn-t-include-a-topic-on-technical-practices&#34;&gt;Humm&amp;hellip;. but Scrum doesn&amp;rsquo;t include a topic on technical practices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen great debates last year over the lack of technical practices in Scrum. Some people believe it is a shortcoming of Scrum while others say Scrum is a product development framework and therefore it is out of scope to include a technical section. Without entering into this debate, something that I&amp;rsquo;ve seen a number of times is software development teams starting &amp;lsquo;just&amp;rsquo; with Scrum, leaving the introduction of some XP practices like TDD for the future (if you take a look the popularity of XP and Scrum, I guess many people observed the same!). This may be justified by an approach where changes are introduced gradually (after all, Scrum per se represents a major change at the organizational and process level).&lt;/p&gt;

&lt;p&gt;But what happens if you start with &amp;lsquo;just&amp;rsquo; Scrum?. Basically, I believe Scrum alone is not sustainable. At least, in software development it is not. As iterations go by and the code base grows, there is more and more work to finish each feature. By consequence, teams cannot keep their commitments, the business people get mad and you hit the &lt;a href=&#34;http://allankelly.blogspot.com/2009/07/scrum-wall-another-agile-failure-mode.html&#34;&gt;Scrum Wall&lt;/a&gt; (ouch, hit it many times)&lt;/p&gt;

&lt;p&gt;This is still a topic I think about often. Scrum, per se, is not sustainable in software development. However, it is the most succesful process in the Agile world. It seems that leaving technical aspects out of it is both something that has help Scrum become more popular and the reason of many of its failures in the development world.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Clean Code is one of the pillars of Agile. Being able to deliver clean code that works greatly enhances the chances of deliver value sustainably and it makes our life as programmers better. Clean code provides the best ROI and the best documentation. Of course it is difficult to do it and it certainly takes a lot more time than writing crappy code. However, by not doing it, we lose a lot of the advantages that Agile claims.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Benefits of agile software development</title>
      <link>http://egutter.github.io/prueba-blog/2009/06/10/benefits-of-agile-software-development/</link>
      <pubDate>Wed, 10 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2009/06/10/benefits-of-agile-software-development/</guid>
      <description>

&lt;h2 id=&#34;incremental-deployment-minimize-time-to-market&#34;&gt;Incremental deployment: minimize time-to-market&lt;/h2&gt;

&lt;p&gt;Since agile processes deliver working software at the end of each iteration (typically around 1-4 weeks) and requirements are prioritized by business value, the organization might choose to release a version of the product as soon as a Minimum Marketable Feature (MMF) has been completed. This way the organization may start to perceive real benefits from the new product far before the development is completed.&lt;/p&gt;

&lt;h2 id=&#34;adapt-to-change&#34;&gt;Adapt to change&lt;/h2&gt;

&lt;p&gt;Agile processes are designed to accept and respond to business changes, such as actions done by competing organizations. By means of the dramatic reduction in the feedback cycle length, it possible to incorporate internal customers (i.e. product management; marketing and sales; etc.) and end users feedback into the development plan rapidly and without significant change in cost. Having an agile software development process in place usually represents a strong competitive advantage with respect to other companies using more traditional development methods.&lt;/p&gt;

&lt;h2 id=&#34;building-quality-in&#34;&gt;Building quality in&lt;/h2&gt;

&lt;p&gt;The key of an incremental deployment strategy is to build an automated regression test harness and the discipline to follow best engineering practices such as: continuous integration; test driven development; code refactoring; coding standards; evolutionary design among others. Through the use of these practices the team is able to produce better code, easier to maintain and with less defects. On the other side, permanent collaboration with business representatives helps the team to deliver software that is aligned to the business needs.&lt;/p&gt;

&lt;h2 id=&#34;eliminate-waste&#34;&gt;Eliminate waste&lt;/h2&gt;

&lt;p&gt;Agile is a lightweight development process based in a just in time strategy. By eliminating extra processes and extra inventory, the product is developed faster and the cost of adapt to change is minimized. Through a continuous improvement process, the team is encourage to constantly evaluate and adapt the process and the product in order to maximize the value delivered to the customer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile Myths: Shorter iterations are stressful</title>
      <link>http://egutter.github.io/prueba-blog/2009/05/16/agile-myths-shorter-iterations-are-stressful/</link>
      <pubDate>Sat, 16 May 2009 00:00:00 +0000</pubDate>
      
      <guid>http://egutter.github.io/prueba-blog/2009/05/16/agile-myths-shorter-iterations-are-stressful/</guid>
      <description>&lt;p&gt;One of the first steps a new agile team has to undertake is to choose their iteration length. My general advice is to start with 2 weeks iterations, although I let teams choose the length they feel comfortable with. I believe it is better if the team make their own decisions and learn with the experience. I&amp;rsquo;m gladly surprised when a team chooses a short iteration length, but sadly that doesn&amp;rsquo;t happen very frequently. Usually the main argument I&amp;rsquo;ve heard in favor of longer iterations is that shorter iterations are stressful and there is not enough time to finish all the work.&lt;/p&gt;

&lt;p&gt;Opposed to this general belief, my own experience taught me that longer iterations are generally more stressful than shorter ones.
I believe the main reason behind such experience is related with the complexity in providing accurate estimations. I don&amp;rsquo;t believe there is such thing as a perfect estimation and I&amp;rsquo;m convinced that high level estimates such as story points are more helpful to forecast than detail estimates such as ideal hours. It is very hard to convince people who come from traditional management about this idea, but as I said before, experience is the best teacher.&lt;/p&gt;

&lt;p&gt;Let me give you some examples. Team A works with 4 weeks iterations. The first week they have a promising start and their burndown curve is aligned with the ideal trend or maybe even a bit under it. By the end of the first week the burndown curve starts moving up until it reach the ideal trend. By the second week, it is over the ideal trend and the gap keeps expanding. Inevitably questions comes from everywhere. Why are we getting delay? The Product Owner starts getting anxious and he transmit his anxiety to the rest of the team. The next 3 weeks, the team will struggle to improve their burndown curve. Finally at the last week they decide they won&amp;rsquo;t be able to finish with everything, so they just remove some scope from the iteration and try to do their best to finish with the ongoing work. With a bit of luck, they were disciplined and they started working with the most valuable stories, so they cut off from the iteration the less important stuff.&lt;/p&gt;

&lt;p&gt;At the end of the iteration the result is clear. They&amp;rsquo;ve just passed a very stressing month and they are probably blaming the new methodology which was put in place. Worst thing is probably next iteration won&amp;rsquo;t change much. They have work delayed from last iteration and more pressure to deliver new stuff. Besides there are a lot of hours to fill for a whole month. It is very hard to identify and estimate all the tasks required to complete several stories, specially when they are big enough to fit in a one month iteration. Without much doubts, next iteration the same scenario will repeat: &amp;ldquo;old habits die hard&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s think in a team which is working with 2 weeks iterations. Team B also starts really well and in the first week the burndown curve is a bit under the ideal trend. The second week the burndown curve have already reached the ideal trend. Although, as the team has planned small stories which can fit in a 2 week iteration and there aren&amp;rsquo;t a lot of hours to fill in only two weeks, the gap between the burndown curve and the ideal trend is insignificant.&lt;/p&gt;

&lt;p&gt;Besides the second week is also the last week of the iteration. At this point there is not much value in looking at the burndown chart. The team has only one week to finish all the remaining work, therefore it is quite easy to recognize if everything can be finished or not. Working with 2 weeks iteration provides the team higher visibility, reducing the probability of having to adjust the iteration scope. If there was a big mistake in the estimations it will probably be caught very soon and the team will be able to adapt the iteration&amp;rsquo;s plan without having to struggle for another 2 or 3 weeks.&lt;/p&gt;

&lt;p&gt;Also the team has discovered an important lesson. If they work with 1 or 2 weeks iterations, the burndown chart is not really valuable. By the time you can see some trend in the chart, the end is so close there is no need of the burndown to know how things are going to end up. Little by little they will also discover estimating tasks in ideal hours is not really necessary. High level story points give them all the information they need.&lt;/p&gt;

&lt;p&gt;There are many other reasons to work with 1 or 2 weeks iterations. First all the meetings such as planning, reviews, retrospectives, are much more shorter and less exhausting. With shorter iterations there are more frequents chances to re-plan and adapt to change. This is very important, specially for teams who are starting with Agile and need to learn and try new things fast. Finally some good practices turn to be mandatory. For example it is not possible to deliver working software every 2-weeks without a reasonable automated test harness.&lt;/p&gt;

&lt;p&gt;I found out frequently when teams reject short iterations, they are just hiding other problems (e.g. communication problems between team members; lack of an automated test harness; Product Owner doesn&amp;rsquo;t participate enough; too big user stories; etc.)&lt;/p&gt;

&lt;p&gt;Shorter iterations are not stressful; it is just another Agile Myth!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>